// src\ts\roboha\tablucya\users.ts (–û–ù–û–í–õ–ï–ù–ò–ô –ö–û–î)
import { supabase } from "../../vxid/supabaseClient";

// =============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü –¢–ê –ö–û–ù–°–¢–ê–ù–¢–ò
// =============================================================================

export let isAuthenticated = false;
export let userAccessLevel: string | null = null;
export let userName: string | null = null;

const USER_DATA_KEY = "userAuthData";

interface UserData {
    Name: string; 
    –î–æ—Å—Ç—É–ø: string; 
    –ü–∞—Ä–æ–ª—å: string; 
    timestamp: number;
    version: string; 
}

// =============================================================================
// LOCAL STORAGE –§–£–ù–ö–¶–Ü–á
// =============================================================================

function saveUserDataToLocalStorage(
    name: string,
    access: string,
    password: string
): void {
    try {
        const userData: UserData = {
            Name: name,
            –î–æ—Å—Ç—É–ø: access,
            –ü–∞—Ä–æ–ª—å: password,
            timestamp: Date.now(),
            version: "1.0",
        };

        localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));
        console.log("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage");
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ localStorage:", error);
    }
}

function getSavedUserDataFromLocalStorage(): {
    name: string;
    access: string;
    password: string;
} | null {
    try {
        const storedData = localStorage.getItem(USER_DATA_KEY);
        if (!storedData) return null;

        const userData: UserData = JSON.parse(storedData);
        if (!userData.Name || !userData.–î–æ—Å—Ç—É–ø || !userData.–ü–∞—Ä–æ–ª—å) {
            clearSavedUserDataFromLocalStorage();
            return null;
        }

        const thirtyDaysInMs = 30 * 24 * 60 * 60 * 1000;
        if (Date.now() - userData.timestamp < thirtyDaysInMs) {
            return {
                name: userData.Name,
                access: userData.–î–æ—Å—Ç—É–ø,
                password: userData.–ü–∞—Ä–æ–ª—å,
            };
        } else {
            clearSavedUserDataFromLocalStorage();
        }
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∑ localStorage:", error);
        clearSavedUserDataFromLocalStorage();
    }
    return null;
}

function clearSavedUserDataFromLocalStorage(): void {
    try {
        localStorage.removeItem(USER_DATA_KEY);
        console.log("üóëÔ∏è –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ localStorage");
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑ localStorage:", error);
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Ç–∞ —Ç–∏–ø—ñ–≤
export { 
    saveUserDataToLocalStorage, 
    getSavedUserDataFromLocalStorage, 
    clearSavedUserDataFromLocalStorage, 
    type UserData 
};

// =============================================================================
// –°–ò–°–¢–ï–ú–ê –ü–ê–†–û–õ–Ü–í –¢–ê –ê–í–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–á
// =============================================================================

function safeParseJSON(data: any): any {
    if (typeof data === "string") {
        try {
            return JSON.parse(data);
        } catch {
            return null;
        }
    }
    return data;
}

async function checkPassword(inputPassword: string): Promise<{
    isValid: boolean;
    accessLevel: string | null;
    userName: string | null;
}> {
    try {
        const { data: slyusars, error } = await supabase
            .from("slyusars")
            .select("data");

        if (error || !slyusars) {
            console.error(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:",
                error
            );
            return { isValid: false, accessLevel: null, userName: null };
        }

        const foundUser = slyusars.find((slyusar) => {
            const slyusarData = safeParseJSON(slyusar.data);
            return slyusarData && String(slyusarData["–ü–∞—Ä–æ–ª—å"]) === inputPassword;
        });

        if (foundUser) {
            const userData = safeParseJSON(foundUser.data);
            const access = userData?.["–î–æ—Å—Ç—É–ø"] || "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä";
            const name = userData?.["Name"] || userData?.["–Ü–º'—è"] || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
            return { isValid: true, accessLevel: access, userName: name };
        }

        return { isValid: false, accessLevel: null, userName: null };
    } catch (error) {
        console.error("üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–∞—Ä–æ–ª—è:", error);
        return { isValid: false, accessLevel: null, userName: null };
    }
}

function showError(errorDiv: HTMLElement, message: string): void {
    errorDiv.textContent = message;
    errorDiv.style.display = "block";
}

// =============================================================================
// –î–û–°–¢–£–ü –î–û –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ (GET SETTING VALUE)
// =============================================================================

async function getSettingValue(
    settingId: number,
    roleKey: string
): Promise<boolean> {
    try {
        const { data, error } = await supabase
            .from("settings")
            .select(roleKey)
            .eq("setting_id", settingId)
            .single();

        if (error) {
            console.error(
                `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (ID:${settingId}, Key:${roleKey}):`,
                error
            );
            return false;
        }

        const value = (data as { [key: string]: any })?.[roleKey];
        return Boolean(value);

    } catch (error) {
        console.error("üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", error);
        return false;
    }
}

// =============================================================================
// –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á: –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–£ –î–õ–Ø –ó–ê–ü–ß–ê–°–¢–ò–°–¢–ê –¢–ê –°–ö–õ–ê–î–û–í–©–ò–ö–ê
// =============================================================================

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç –±–∞—á–∏—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏
 * setting_id 12, –∫–æ–ª–æ–Ω–∫–∞ "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç"
 */
export async function canZapchastystViewAllActs(): Promise<boolean> {
    if (userAccessLevel !== "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç") return true;
    return await getSettingValue(12, "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç");
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –°–∫–ª–∞–¥–æ–≤—â–∏–∫ –±–∞—á–∏—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏
 * setting_id 9, –∫–æ–ª–æ–Ω–∫–∞ "–°–∫–ª–∞–¥–æ–≤—â–∏–∫"
 */
export async function canSkladovschykViewAllActs(): Promise<boolean> {
    if (userAccessLevel !== "–°–∫–ª–∞–¥–æ–≤—â–∏–∫") return true;
    return await getSettingValue(9, "–°–∫–ª–∞–¥–æ–≤—â–∏–∫");
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –∞–∫—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
 * setting_id 13, –∫–æ–ª–æ–Ω–∫–∞ "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç"
 */
export async function canZapchastystOpenActs(): Promise<boolean> {
    if (userAccessLevel !== "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç") return true;
    return await getSettingValue(13, "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç");
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –°–∫–ª–∞–¥–æ–≤—â–∏–∫ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –∞–∫—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
 * setting_id 10, –∫–æ–ª–æ–Ω–∫–∞ "–°–∫–ª–∞–¥–æ–≤—â–∏–∫"
 */
export async function canSkladovschykOpenActs(): Promise<boolean> {
    if (userAccessLevel !== "–°–∫–ª–∞–¥–æ–≤—â–∏–∫") return true;
    return await getSettingValue(10, "–°–∫–ª–∞–¥–æ–≤—â–∏–∫");
}

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏—Ç–∏ –∞–∫—Ç–∏
 */
export async function canUserViewActs(): Promise<boolean> {
    if (userAccessLevel === "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç") {
        return await canZapchastystViewAllActs();
    }
    if (userAccessLevel === "–°–∫–ª–∞–¥–æ–≤—â–∏–∫") {
        return await canSkladovschykViewAllActs();
    }
    return true; // –Ü–Ω—à—ñ —Ä–æ–ª—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø
}

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –∞–∫—Ç–∏
 */
export async function canUserOpenActs(): Promise<boolean> {
    if (userAccessLevel === "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç") {
        return await canZapchastystOpenActs();
    }
    if (userAccessLevel === "–°–∫–ª–∞–¥–æ–≤—â–∏–∫") {
        return await canSkladovschykOpenActs();
    }
    return true; // –Ü–Ω—à—ñ —Ä–æ–ª—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø
}

// =============================================================================
// –û–ù–û–í–õ–ï–ù–ù–Ø –Ü–ù–¢–ï–†–§–ï–ô–°–£ (–ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê)
// =============================================================================

/**
 * –î–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ë–î
 * –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –ü–Ü–°–õ–Ø —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É –∑ main.html
 */
export async function updateUIBasedOnAccess(accessLevel: string | null): Promise<void> {
    const settingsMenuItem = document.querySelector(
        '[data-action="openSettings"]'
    )?.closest("li") as HTMLElement | null;
    const addClientMenuItem = document.querySelector(
        '[data-action="openClient"]'
    )?.closest("li") as HTMLElement | null;
    const homeMenuItem = document.querySelector('[data-action="openHome"]')
        ?.closest("li") as HTMLElement | null;
    const buhhalteriyaMenuItem = document.querySelector(
        '[data-action="openBukhhalteriya"]'
    )?.closest("li") as HTMLElement | null;

    const setVisibility = (element: HTMLElement | null, isVisible: boolean) => {
        if (element) {
            element.style.display = isVisible ? "" : "none"; 
        }
    };

    if (!accessLevel) {
        setVisibility(settingsMenuItem, false);
        setVisibility(addClientMenuItem, false);
        setVisibility(homeMenuItem, false);
        setVisibility(buhhalteriyaMenuItem, false);
        return;
    }

    let shouldRenderSettings = true;
    let shouldRenderAdd = true;
    let shouldRenderHome = true;
    let shouldRenderBuhhalteriya = true;

    // --- –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –°–ª—é—Å–∞—Ä, –ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç, –°–∫–ª–∞–¥–æ–≤—â–∏–∫ ---
    if (
        accessLevel === "–°–ª—é—Å–∞—Ä" ||
        accessLevel === "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç" ||
        accessLevel === "–°–∫–ª–∞–¥–æ–≤—â–∏–∫"
    ) {
        shouldRenderSettings = false;
        shouldRenderHome = false;
    }

    // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –ü—Ä–∏–π–º–∞–ª—å–Ω–∏–∫–∞ ---
    if (accessLevel === "–ü—Ä–∏–π–º–∞–ª—å–Ω–∏–∫") {
        shouldRenderSettings = await getSettingValue(1, "–ü—Ä–∏–π–º–∞–ª—å–Ω–∏–∫");
        shouldRenderAdd = await getSettingValue(2, "–ü—Ä–∏–π–º–∞–ª—å–Ω–∏–∫");
        shouldRenderBuhhalteriya = await getSettingValue(4, "–ü—Ä–∏–π–º–∞–ª—å–Ω–∏–∫");
    }

    // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –°–ª—é—Å–∞—Ä—è ---
    if (accessLevel === "–°–ª—é—Å–∞—Ä") {
        shouldRenderAdd = false;
        shouldRenderBuhhalteriya = false;
    }

    // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç–∞ ---
    if (accessLevel === "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç") {
        shouldRenderAdd = await getSettingValue(1, "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç");
        shouldRenderBuhhalteriya = await getSettingValue(2, "–ó–∞–ø—á–∞—Å—Ç–∏—Å—Ç");
    }

    // --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –°–∫–ª–∞–¥–æ–≤—â–∏–∫–∞ ---
    if (accessLevel === "–°–∫–ª–∞–¥–æ–≤—â–∏–∫") {
        shouldRenderAdd = await getSettingValue(1, "–°–∫–ª–∞–¥–æ–≤—â–∏–∫");
    }

    setVisibility(settingsMenuItem, shouldRenderSettings);
    setVisibility(addClientMenuItem, shouldRenderAdd);
    setVisibility(homeMenuItem, shouldRenderHome);
    setVisibility(buhhalteriyaMenuItem, shouldRenderBuhhalteriya);

    console.log(`‚úÖ UI –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É: ${accessLevel}`, {
        –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: shouldRenderSettings,
        –î–æ–¥–∞—Ç–∏: shouldRenderAdd,
        –ù–∞—Ä—è–¥: shouldRenderHome,
        –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è: shouldRenderBuhhalteriya
    });
}

// =============================================================================
// –§–£–ù–ö–¶–Ü–á –ê–í–¢–û–í–•–û–î–£ –¢–ê –ü–û–ö–ê–ó–£ –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê
// =============================================================================

export async function attemptAutoLogin(): Promise<{ accessLevel: string | null; userName: string | null }> {
    const savedData = getSavedUserDataFromLocalStorage();
    if (!savedData) {
        return { accessLevel: null, userName: null };
    }

    try {
        const {
            isValid,
            accessLevel,
            userName: fetchedUserName,
        } = await checkPassword(savedData.password);

        if (isValid) {
            isAuthenticated = true;
            userAccessLevel = accessLevel;
            userName = fetchedUserName || savedData.name;
            console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
            return { accessLevel: userAccessLevel, userName: userName };
        } else {
            clearSavedUserDataFromLocalStorage();
            return { accessLevel: null, userName: null };
        }
    } catch (error) {
        console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –≤—Ö–æ–¥—ñ:", error);
        return { accessLevel: null, userName: null };
    }
}

export function createLoginModal(): Promise<string | null> {
    return new Promise((resolve) => {
        const modal = document.createElement("div");
        modal.id = "login-modal_users";
        modal.className = "login-modal";
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.8); display: flex; justify-content: center;
            align-items: center; z-index: 10000;
        `;

        const modalContent = document.createElement("div");
        modalContent.className = "login-modal-content";
        modalContent.style.cssText = `
            background: white; padding: 40px; border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3); text-align: center;
            min-width: 350px; max-width: 90vw;
        `;
        
        const title = document.createElement("h3");
        title.textContent = "üîê –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É";
        title.className = "login-modal-title";
        title.style.cssText = `margin: 0 0 25px 0; color: #333; font-size: 24px;`;

        const input = document.createElement("input");
        input.type = "password";
        input.id = "login-input_users";
        input.placeholder = "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å...";
        input.className = "login-input";
        input.style.cssText = `
            width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 8px;
            margin: 15px 0; font-size: 16px; box-sizing: border-box; transition: border-color 0.3s ease;
        `;

        const errorDiv = document.createElement("div");
        errorDiv.id = "login-error";
        errorDiv.style.cssText = `color: #f44336; margin: 10px 0; display: none; font-size: 14px;`;

        const button = document.createElement("button");
        button.id = "login-button_users";
        button.textContent = "–£–≤—ñ–π—Ç–∏";
        button.className = "login-button";
        button.style.cssText = `
            background: #4CAF50; color: white; border: none; padding: 12px 30px;
            border-radius: 8px; cursor: pointer; font-size: 16px; margin-top: 20px;
            transition: background-color 0.3s ease; width: 100%;
        `;

        button.addEventListener("mouseenter", () => (button.style.background = "#45a049"));
        button.addEventListener("mouseleave", () => (button.style.background = "#4CAF50"));
        input.addEventListener("focus", () => (input.style.borderColor = "#4CAF50"));
        input.addEventListener("blur", () => (input.style.borderColor = "#ddd"));

        button.addEventListener("click", async () => {
            const loginValue = input.value.trim();
            if (!loginValue) {
                showError(errorDiv, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å");
                return;
            }

            button.textContent = "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...";
            button.setAttribute("disabled", "true");
            button.style.background = "#ccc";
            errorDiv.style.display = "none";

            try {
                const {
                    isValid,
                    accessLevel,
                    userName: fetchedUserName,
                } = await checkPassword(loginValue);

                if (isValid) {
                    isAuthenticated = true;
                    userAccessLevel = accessLevel;
                    userName = fetchedUserName;

                    if (userName && accessLevel) {
                        saveUserDataToLocalStorage(userName, accessLevel, loginValue);
                    }

                    modal.remove();
                    resolve(userAccessLevel);

                } else {
                    showError(errorDiv, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
                    button.textContent = "–£–≤—ñ–π—Ç–∏";
                    button.removeAttribute("disabled");
                    button.style.background = "#4CAF50";
                    input.focus();
                    input.select();
                }
            } catch (error) {
                console.error("üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–∞—Ä–æ–ª—è:", error);
                showError(errorDiv, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è");
                button.textContent = "–£–≤—ñ–π—Ç–∏";
                button.removeAttribute("disabled");
                button.style.background = "#4CAF50";
                resolve(null);
            }
        });
        
        input.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                button.click();
            }
        });

        const preventEscape = (e: KeyboardEvent) => {
            if (e.key === "Escape") {
                e.preventDefault();
                e.stopPropagation();
            }
        };
        document.addEventListener("keydown", preventEscape);

        const originalRemove = modal.remove;
        modal.remove = function () {
            document.removeEventListener("keydown", preventEscape);
            originalRemove.call(this);
        };

        modalContent.appendChild(title);
        modalContent.appendChild(input);
        modalContent.appendChild(errorDiv);
        modalContent.appendChild(button);
        modal.appendChild(modalContent);

        setTimeout(() => input.focus(), 100);
        document.body.appendChild(modal);
    });
}

export async function showLoginModalBeforeTable(): Promise<string | null> {
    const { accessLevel: autoAccessLevel } = await attemptAutoLogin();

    if (autoAccessLevel) {
        console.log("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π, accessLevel:", autoAccessLevel);
        return autoAccessLevel;
    }

    const tableContainer = document.getElementById(
        "table-container-modal-sakaz_narad"
    );
    if (tableContainer) {
        tableContainer.innerHTML =
            '<div class="table-placeholder">üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∏—Å—Ç–µ–º–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è</div>';
    }

    return await createLoginModal();
}

// =============================================================================
// –Ü–ù–®–Ü –ï–ö–°–ü–û–†–¢–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á
// =============================================================================

export function isUserAuthenticated(): boolean {
    return isAuthenticated;
}

export function logoutFromSystemAndRedirect(): void {
    clearSavedUserDataFromLocalStorage();
    isAuthenticated = false;
    userAccessLevel = null;
    userName = null;
    console.log("üö™ –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...");
    window.location.href = "/STO/";
}

export async function initializeAuthSystem(): Promise<void> {
    console.log("‚ÑπÔ∏è initializeAuthSystem - —Ñ—É–Ω–∫—Ü—ñ—è –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.");
}
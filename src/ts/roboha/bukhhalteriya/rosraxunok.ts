// src/ts/roboha/bukhhalteriya/rosraxunok.ts
import { supabase } from "../../vxid/supabaseClient";
import { showNotification } from "../zakaz_naraudy/inhi/vspluvauhe_povidomlenna";
import {
  getSavedUserDataFromLocalStorage,
  userAccessLevel,
} from "../tablucya/users";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
const FULL_ACCESS_ALIASES = ["–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", "full", "admin", "administrator"];

// –¢–∏–ø–∏ –¥–ª—è –¥–∞–Ω–∏—Ö
export interface PodlegleRecord {
  dateOpen: string;
  dateClose: string;
  name: string;
  act: string;
  client: string;
  automobile: string;
  work: string;
  quantity: number;
  price: number;
  total: number;
  isClosed: boolean;
  isPaid: boolean;
  paymentDate?: string;
}

interface SlyusarData {
  Name: string;
  –Ü—Å—Ç–æ—Ä—ñ—è: {
    [date: string]: Array<{
      –ê–∫—Ç: string;
      –ó–∞–ø–∏—Å–∏: Array<{
        –¶—ñ–Ω–∞: number;
        –†–æ–±–æ—Ç–∞: string;
        –ö—ñ–ª—å–∫—ñ—Å—Ç—å: number;
        –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ?: string;
      }>;
      –ö–ª—ñ—î–Ω—Ç?: string;
      –ê–≤—Ç–æ–º–æ–±—ñ–ª—å?: string;
      –°—É–º–º–∞–†–æ–±–æ—Ç–∏: number;
      –î–∞—Ç–∞–ó–∞–∫—Ä–∏—Ç—Ç—è: string | null;
    }>;
  };
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
function getCurrentAccessLevel(): string {
  const fromVar =
    (typeof userAccessLevel === "string" ? userAccessLevel : "") || "";
  const fromLS = getSavedUserDataFromLocalStorage?.() || null;

  const level = (fromVar || fromLS?.access || (fromLS as any)?.["–î–æ—Å—Ç—É–ø"] || "")
    .toString()
    .normalize("NFKC")
    .trim()
    .toLowerCase();

  return level;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø
 */
function hasFullAccess(): boolean {
  return FULL_ACCESS_ALIASES.includes(getCurrentAccessLevel());
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY
 */
function getCurrentDate(): string {
  const now = new Date();
  const day = now.getDate().toString().padStart(2, "0");
  const month = (now.getMonth() + 1).toString().padStart(2, "0");
  const year = now.getFullYear();
  return `${day}.${month}.${year}`;
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
 */
function createPasswordConfirmationModal(
  action: "pay" | "unpay"
): Promise<boolean> {
  return new Promise((resolve) => {
    const modal = document.createElement("div");
    modal.id = "password-confirmation-modal";
    modal.className = "login-modal";
    modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.5); display: flex; justify-content: center;
            align-items: center; z-index: 10000;
        `;

    const modalContent = document.createElement("div");
    modalContent.className = "login-modal-content";
    modalContent.style.cssText = `
            background-color: #fff; padding: 20px; border-radius: 8px;
            width: 300px; text-align: center; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        `;

    const title = document.createElement("h3");
    title.textContent =
      action === "pay"
        ? "üîê –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É"
        : "üîê –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è";
    title.className = "login-modal-title";
    title.style.cssText = `margin-bottom: 15px; color: #333;`;

    const description = document.createElement("p");
    description.style.cssText = `margin-bottom: 15px; color: #666; font-size: 14px;`;

    const input = document.createElement("input");
    input.type = "password";
    input.placeholder = "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å...";
    input.className = "login-input";
    input.style.cssText = `
            width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ccc;
            border-radius: 4px; box-sizing: border-box;
        `;

    const errorDiv = document.createElement("div");
    errorDiv.style.cssText = `color: #f44336; margin: 10px 0; display: none; font-size: 14px;`;

    const buttonsContainer = document.createElement("div");
    buttonsContainer.style.cssText = `display: flex; gap: 10px; justify-content: center;`;

    const confirmButton = document.createElement("button");
    confirmButton.textContent = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏";
    confirmButton.className = "login-button";
    confirmButton.style.cssText = `
            padding: 10px 20px; background-color: #007bff; color: #fff; border: none;
            border-radius: 4px; cursor: pointer; transition: background-color 0.2s; flex: 1;
        `;

    const cancelButton = document.createElement("button");
    cancelButton.textContent = "–°–∫–∞—Å—É–≤–∞—Ç–∏";
    cancelButton.style.cssText = `
            padding: 10px 20px; background-color: #6c757d; color: #fff; border: none;
            border-radius: 4px; cursor: pointer; transition: background-color 0.2s; flex: 1;
        `;

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    confirmButton.addEventListener("click", async () => {
      const inputPassword = input.value.trim();
      if (!inputPassword) {
        errorDiv.textContent = "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å";
        errorDiv.style.display = "block";
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const savedData = getSavedUserDataFromLocalStorage();
      if (!savedData) {
        errorDiv.textContent = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞";
        errorDiv.style.display = "block";
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
      if (inputPassword === savedData.password) {
        modal.remove();
        resolve(true);
      } else {
        errorDiv.textContent = "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å";
        errorDiv.style.display = "block";
        input.focus();
        input.select();
      }
    });

    cancelButton.addEventListener("click", () => {
      modal.remove();
      resolve(false);
    });

    // –û–±—Ä–æ–±–∫–∞ Enter
    input.addEventListener("keypress", (event) => {
      if (event.key === "Enter") {
        confirmButton.click();
      }
    });

    // –û–±—Ä–æ–±–∫–∞ Escape
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        modal.remove();
        resolve(false);
      }
    };
    document.addEventListener("keydown", handleEscape);

    // –û—á–∏—â–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    const originalRemove = modal.remove;
    modal.remove = function () {
      document.removeEventListener("keydown", handleEscape);
      originalRemove.call(this);
    };

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    buttonsContainer.appendChild(confirmButton);
    buttonsContainer.appendChild(cancelButton);

    modalContent.appendChild(title);
    modalContent.appendChild(description);
    modalContent.appendChild(input);
    modalContent.appendChild(errorDiv);
    modalContent.appendChild(buttonsContainer);
    modal.appendChild(modalContent);

    document.body.appendChild(modal);
    setTimeout(() => input.focus(), 100);
  });
}

/**
 * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—ñ slyusars
 */
async function saveSlyusarsDataToDatabase(
  slyusarsData: SlyusarData[]
): Promise<void> {
  try {
    showNotification("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –≤ –±–∞–∑—É...", "info", 2000);

    // –ë–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑ –±–∞–∑–∏
    const { data: existingData, error: fetchError } = await supabase
      .from("slyusars")
      .select("*");

    if (fetchError) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:", fetchError);
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${fetchError.message}`);
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É –∫–ª—é—á–∞ —Ç–∞–±–ª–∏—Ü—ñ
    const primaryKeyCandidates = ["id", "slyusars_id", "uid", "pk"];
    const detectPrimaryKey = (row: any): string | null => {
      if (!row) return null;
      for (const k of primaryKeyCandidates) if (k in row) return k;
      return null;
    };
    const primaryKey = detectPrimaryKey(existingData?.[0]);

    for (const slyusar of slyusarsData) {
      try {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å —É –≤–∏–±—ñ—Ä—Ü—ñ –∑–∞ —ñ–º'—è–º –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ JSON
        const target = existingData?.find((item) => {
          let js = item.data;
          if (typeof js === "string") {
            try {
              js = JSON.parse(js);
            } catch {
              /* ignore */
            }
          }
          return js && js.Name === slyusar.Name;
        });

        if (!target) {
          console.warn(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å –¥–ª—è —Å–ª—é—Å–∞—Ä—è: ${slyusar.Name}`);
          continue;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å
        if (primaryKey) {
          const { data: upd, error: updErr } = await supabase
            .from("slyusars")
            .update({ data: slyusar })
            .eq(primaryKey, target[primaryKey])
            .select();

          if (updErr) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ${slyusar.Name}:`, updErr);
            throw updErr;
          } else {
            console.log(
              `‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ –∫–ª—é—á—É (${primaryKey}) –¥–ª—è ${slyusar.Name}`,
              upd
            );
          }
        } else {
          // fallback: –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –≤–º—ñ—Å—Ç–æ–º JSON
          const { data: upd, error: updErr } = await supabase
            .from("slyusars")
            .update({ data: slyusar })
            .contains("data", { Name: slyusar.Name })
            .select();

          if (updErr) {
            console.error(
              `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (fallback) ${slyusar.Name}:`,
              updErr
            );
            throw updErr;
          } else {
            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ JSON Name –¥–ª—è ${slyusar.Name}`, upd);
          }
        }
      } catch (recordError) {
        console.error(
          `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Å—É –¥–ª—è ${slyusar.Name}:`,
          recordError
        );
        throw recordError;
      }
    }

    showNotification("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—É", "success");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É slyusars:", error);
    let errorMessage = "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞";
    if (error instanceof Error) errorMessage = error.message;
    else if (typeof error === "object" && error !== null)
      errorMessage = JSON.stringify(error);

    showNotification(
      `‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö: ${errorMessage}. –ó–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –Ω–µ –∑–±–µ—Ä–µ–≥—Ç–∏—Å—è.`,
      "error",
      5000
    );
    throw error;
  }
}

/**
 * –ú–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫—Ç—ñ–≤ –¥–ª—è –ø—ñ–¥–ª–µ–≥–ª–∏—Ö
 */
export async function runMassPaymentCalculationForPodlegle(
  filteredData: PodlegleRecord[],
  podlegleData: PodlegleRecord[],
  slyusarsData: SlyusarData[],
  updateTableCallback: () => void
): Promise<void> {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
  if (!hasFullAccess()) {
    showNotification(
      "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞—Å–æ–≤–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É",
      "warning"
    );
    return;
  }

  // –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
  const confirmed = await createPasswordConfirmationModal("pay");
  if (!confirmed) {
    showNotification("üö´ –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", "info");
    return;
  }

  if (filteredData.length === 0) {
    showNotification(
      "‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ñ—ñ–ª—å—Ç—Ä—ñ",
      "info"
    );
    return;
  }

  // –î–∞—Ç–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
  const currentDate = getCurrentDate();
  let updatedCount = 0;

  // –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
  filteredData.forEach((record) => {
    if (!record.isPaid) {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –º–∞—Å–∏–≤—ñ podlegleData
      const originalIndex = podlegleData.findIndex(
        (item) =>
          item.dateOpen === record.dateOpen &&
          item.name === record.name &&
          item.act === record.act &&
          item.work === record.work &&
          item.price === record.price &&
          item.quantity === record.quantity
      );

      if (originalIndex !== -1) {
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –º–∞—Å–∏–≤—ñ
        podlegleData[originalIndex].isPaid = true;
        podlegleData[originalIndex].paymentDate = currentDate;
        updatedCount++;

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ slyusarsData
        const slyusar = slyusarsData.find((s) => s.Name === record.name);
        if (slyusar && slyusar.–Ü—Å—Ç–æ—Ä—ñ—è[record.dateOpen]) {
          const actRecord = slyusar.–Ü—Å—Ç–æ—Ä—ñ—è[record.dateOpen].find(
            (a) => a.–ê–∫—Ç === record.act
          );
          if (actRecord) {
            const workEntry = actRecord.–ó–∞–ø–∏—Å–∏.find(
              (e) =>
                e.–†–æ–±–æ—Ç–∞ === record.work &&
                e.–¶—ñ–Ω–∞ === record.price &&
                e.–ö—ñ–ª—å–∫—ñ—Å—Ç—å === record.quantity
            );
            if (workEntry) {
              workEntry.–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ = currentDate;
            }
          }
        }
      }
    }
  });

  if (updatedCount === 0) {
    showNotification(
      "‚ÑπÔ∏è –£—Å—ñ –∑–∞–ø–∏—Å–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ñ—ñ–ª—å—Ç—Ä—ñ –≤–∂–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ",
      "info"
    );
    return;
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
  try {
    await saveSlyusarsDataToDatabase(slyusarsData);
    updateTableCallback();
    showNotification(
      `‚úÖ –ú–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ (${updatedCount} –∑–∞–ø–∏—Å—ñ–≤ –∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö)`,
      "success"
    );
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:", error);
    showNotification("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–º—ñ–Ω —É –±–∞–∑—É", "error");
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–∏–ø–ª–∞—Ç–∏ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –ø–∞—Ä–æ–ª—è
 */
export async function togglePaymentWithConfirmation(
  index: number,
  –¥–∞–Ω–Ω—ñ: PodlegleRecord[],
  slyusarsData: SlyusarData[],
  updateTableCallback: () => void
): Promise<void> {
  if (!–¥–∞–Ω–Ω—ñ[index]) {
    console.error(`–ó–∞–ø–∏—Å –∑ —ñ–Ω–¥–µ–∫—Å–æ–º ${index} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    showNotification("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "error");
    return;
  }

  const record = –¥–∞–Ω–Ω—ñ[index];

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  if (!hasFullAccess()) {
    showNotification("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏", "warning");
    return;
  }

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const action = record.isPaid ? "unpay" : "pay";

  // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  const confirmed = await createPasswordConfirmationModal(action);

  if (!confirmed) {
    showNotification("üö´ –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", "info");
    return;
  }

  // –í–∏–∫–æ–Ω—É—î–º–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏
  await togglePayment(index, –¥–∞–Ω–Ω—ñ, slyusarsData, updateTableCallback);
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–∏–ø–ª–∞—Ç–∏ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –≤ –±–∞–∑—É
 */
export async function togglePayment(
  index: number,
  –¥–∞–Ω–Ω—ñ: PodlegleRecord[],
  slyusarsData: SlyusarData[],
  updateTableCallback: () => void
): Promise<void> {
  if (!–¥–∞–Ω–Ω—ñ[index]) {
    console.error(`–ó–∞–ø–∏—Å –∑ —ñ–Ω–¥–µ–∫—Å–æ–º ${index} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    showNotification("‚ùå –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "error");
    return;
  }

  const record = –¥–∞–Ω–Ω—ñ[index];

  // –Ø–∫—â–æ –∑–∞–ø–∏—Å —â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∏–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–ø–ª–∞—Ç—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
  if (!record.isPaid) {
    const currentDate = getCurrentDate();
    record.isPaid = true;
    record.paymentDate = currentDate;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å –≤ slyusarsData —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
    const slyusar = slyusarsData.find((s) => s.Name === record.name);
    if (!slyusar) {
      console.error(`‚ùå –°–ª—é—Å–∞—Ä—è ${record.name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ slyusarsData`);
      showNotification(
        `‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: —Å–ª—é—Å–∞—Ä—è ${record.name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`,
        "error"
      );
      return;
    }

    if (!slyusar.–Ü—Å—Ç–æ—Ä—ñ—è[record.dateOpen]) {
      console.error(
        `‚ùå –î–∞—Ç–∞ ${record.dateOpen} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó —Å–ª—é—Å–∞—Ä—è ${record.name}`
      );
      showNotification(
        `‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –¥–∞—Ç–∞ ${record.dateOpen} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó`,
        "error"
      );
      return;
    }

    const actRecord = slyusar.–Ü—Å—Ç–æ—Ä—ñ—è[record.dateOpen].find(
      (a) => a.–ê–∫—Ç === record.act
    );
    if (!actRecord) {
      console.error(
        `‚ùå –ê–∫—Ç ${record.act} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –¥–∞—Ç–∏ ${record.dateOpen}`
      );
      showNotification(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∞–∫—Ç ${record.act} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`, "error");
      return;
    }

    const workEntry = actRecord.–ó–∞–ø–∏—Å–∏.find(
      (e) =>
        e.–†–æ–±–æ—Ç–∞ === record.work &&
        e.–¶—ñ–Ω–∞ === record.price &&
        e.–ö—ñ–ª—å–∫—ñ—Å—Ç—å === record.quantity
    );

    if (!workEntry) {
      console.error(`‚ùå –ó–∞–ø–∏—Å —Ä–æ–±–æ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π:`, {
        work: record.work,
        price: record.price,
        quantity: record.quantity,
      });
      showNotification(
        `‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∑–∞–ø–∏—Å —Ä–æ–±–æ—Ç–∏ "${record.work}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`,
        "error"
      );
      return;
    }

    workEntry.–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ = currentDate;
  } else {
    // –Ø–∫—â–æ –∑–∞–ø–∏—Å –æ–ø–ª–∞—á–µ–Ω–∏–π, —Å–∫–∞—Å–æ–≤—É—î–º–æ –æ–ø–ª–∞—Ç—É
    record.isPaid = false;
    record.paymentDate = "";

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—é—á "–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ" –∑ slyusarsData
    const slyusar = slyusarsData.find((s) => s.Name === record.name);
    if (slyusar && slyusar.–Ü—Å—Ç–æ—Ä—ñ—è[record.dateOpen]) {
      const actRecord = slyusar.–Ü—Å—Ç–æ—Ä—ñ—è[record.dateOpen].find(
        (a) => a.–ê–∫—Ç === record.act
      );
      if (actRecord) {
        const workEntry = actRecord.–ó–∞–ø–∏—Å–∏.find(
          (e) =>
            e.–†–æ–±–æ—Ç–∞ === record.work &&
            e.–¶—ñ–Ω–∞ === record.price &&
            e.–ö—ñ–ª—å–∫—ñ—Å—Ç—å === record.quantity
        );
        if (workEntry) {
          delete workEntry.–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ;
        }
      }
    }
  }

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
  try {
    await saveSlyusarsDataToDatabase(slyusarsData);
    updateTableCallback();
    showNotification(
      record.isPaid
        ? `üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${record.paymentDate}`
        : "‚ùå –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
      "success"
    );
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:`, error);
    showNotification("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö", "error");
    // –í—ñ–¥–∫–∞—Ç—É—î–º–æ –∑–º—ñ–Ω–∏ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
    record.isPaid = !record.isPaid;
    record.paymentDate = record.isPaid ? getCurrentDate() : "";
    updateTableCallback();
  }
}

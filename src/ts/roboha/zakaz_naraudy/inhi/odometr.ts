/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ–π –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥—É –ø—Ä–æ–±—ñ–≥—É,
 * –¥–æ–∑–≤–æ–ª—è—é—á–∏ –≤–≤–æ–¥–∏—Ç–∏ –ª–∏—à–µ —á–∏—Å–ª–∞ –¥–æ 1 000 000 –∑ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞–º–∏ —Ç–∏—Å—è—á.
 *
 * @param elementId ID –µ–ª–µ–º–µ–Ω—Ç–∞, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'editable-probig').
 */
export function initOdometerInput(elementId: string): void {
  const inputElement = document.getElementById(elementId);

  if (!inputElement) {
    console.warn(`–ï–ª–µ–º–µ–Ω—Ç –∑ ID '${elementId}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–¥–æ–º–µ—Ç—Ä–∞.`);
    return;
  }

  // üëá –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–∞
  const formatNumber = (value: string): string => {
    let cleanedValue = value.replace(/\D/g, "");
    let numValue = parseInt(cleanedValue, 10);
    const MAX_VALUE = 1000000;

    if (isNaN(numValue) || numValue < 0) numValue = 0;
    else if (numValue > MAX_VALUE) numValue = MAX_VALUE;

    return numValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
  };

  // üîÅ –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  const initialValue = inputElement.textContent || "";
  inputElement.textContent = formatNumber(initialValue);

  // üéØ –°–ª—É—Ö–∞—á –ø–æ–¥—ñ—ó –≤–≤–æ–¥—É
  inputElement.addEventListener("input", (event) => {
    const target = event.target as HTMLElement;
    const originalValue = target.textContent || "";
    const formattedValue = formatNumber(originalValue);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫—É—Ä—Å–æ—Ä–∞
    const selection = window.getSelection();
    let originalCaretPosition = 0;
    if (selection && selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      originalCaretPosition = range.startOffset;
    }

    // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é –∫—É—Ä—Å–æ—Ä–∞
    let charCountOriginal = 0;
    for (let i = 0; i < originalValue.length && i < originalCaretPosition; i++) {
      if (/\d/.test(originalValue[i])) charCountOriginal++;
    }

    let newCaretPosition = 0;
    let charCountFormatted = 0;
    for (let i = 0; i < formattedValue.length; i++) {
      if (/\d/.test(formattedValue[i])) charCountFormatted++;
      if (charCountFormatted === charCountOriginal) {
        newCaretPosition = i + 1;
        break;
      }
    }

    if (newCaretPosition === 0 && charCountOriginal > 0) {
      newCaretPosition = formattedValue.length;
    } else if (originalValue.replace(/\D/g, "").length === 0) {
      newCaretPosition = 0;
    }

    target.textContent = formattedValue;

    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ä—Å–æ—Ä
    if (selection) {
      const range = document.createRange();
      const textNode = target.firstChild;
      if (textNode && textNode.nodeType === Node.TEXT_NODE) {
        const pos = Math.min(newCaretPosition, formattedValue.length);
        range.setStart(textNode, pos);
        range.setEnd(textNode, pos);
        selection.removeAllRanges();
        selection.addRange(range);
      } else {
        range.selectNodeContents(target);
        range.collapse(false);
        selection.removeAllRanges();
        selection.addRange(range);
      }
    }
  });

  // üéØ –°–ª—É—Ö–∞—á –≤—Ç—Ä–∞—Ç–∏ —Ñ–æ–∫—É—Å—É
  inputElement.addEventListener("blur", (event) => {
    const target = event.target as HTMLElement;
    const value = target.textContent || "";
    target.textContent = formatNumber(value);
  });
}

// src\ts\roboha\zakaz_naraudy\inhi\ctvorennia_papku_googleDrive..ts

import { supabase } from "../../../vxid/supabaseClient";
import { showNotification } from "./vspluvauhe_povidomlenna";

// ------- –ì–ª–æ–±–∞–ª—å–Ω—ñ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—ó -------
declare let gapi: any;
declare let google: any;

// ------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ -------
const CLIENT_ID =
  "467665595953-63b13ucmm8ssbm2vfjjr41e3nqt6f11a.apps.googleusercontent.com";
const SCOPES = "https://www.googleapis.com/auth/drive.file";

const ALLOWED_ORIGINS = [
  "https://veron3373.github.io",
  "http://localhost:3000",
  "http://127.0.0.1:3000",
  "http://localhost:5173",
  "http://127.0.0.1:5173",
  "http://localhost:8080",
  "http://127.0.0.1:8080",
];

// ------- –°—Ç–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó -------
let accessToken: string | null = null;

// üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –∫–ª—ñ–∫—ñ–≤ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
let isCreatingFolder = false;

// ================= –£–¢–ò–õ–Ü–¢–ò =================

function handleError(error: unknown): Error {
  if (error instanceof Error) return error;
  if (typeof error === "string") return new Error(error);
  return new Error("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞");
}

function isAllowedOrigin(): boolean {
  return ALLOWED_ORIGINS.includes(window.location.origin);
}

// –ë–µ–∑–ø–µ—á–Ω–∏–π JSON.parse
export function safeParseJSON(data: any): any {
  if (typeof data === "string") {
    try {
      return JSON.parse(data);
    } catch {
      return null;
    }
  }
  return data;
}

// –û—á–∏—Å—Ç–∫–∞ —á–∞—Å—Ç–∏–Ω –Ω–∞–∑–≤–∏ –¥–ª—è –ø–∞–ø–æ–∫
function cleanNameComponent(component: string): string {
  return component
    .replace(/[^\p{L}\p{N}\s.-]/gu, "")
    .replace(/\s+/g, "_")
    .replace(/_{2,}/g, "_")
    .replace(/^_|_$/g, "");
}

// ================= –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø API =================

async function loadGoogleAPIs(): Promise<void> {
  return new Promise((resolve, reject) => {
    if (typeof google !== "undefined" && typeof gapi !== "undefined") {
      resolve();
      return;
    }

    const gisScript = document.createElement("script");
    gisScript.src = "https://accounts.google.com/gsi/client";
    gisScript.async = true;
    gisScript.defer = true;

    gisScript.onload = () => {
      const gapiScript = document.createElement("script");
      gapiScript.src = "https://apis.google.com/js/api.js";
      gapiScript.async = true;
      gapiScript.defer = true;

      gapiScript.onload = () => resolve();
      gapiScript.onerror = () =>
        reject(new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ GAPI"));
      document.head.appendChild(gapiScript);
    };

    gisScript.onerror = () =>
      reject(new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Google Identity Services"));

    document.head.appendChild(gisScript);
  });
}

export async function initGoogleApi(): Promise<void> {
  try {
    if (!isAllowedOrigin()) {
      throw new Error(`–î–æ–º–µ–Ω ${window.location.origin} –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ.`);
    }

    await loadGoogleAPIs();

    await new Promise<void>((resolve, reject) => {
      gapi.load("client", {
        callback: resolve,
        onerror: () => reject(new Error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è GAPI")),
      });
    });

    await new Promise<void>((resolve, reject) => {
      const tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: CLIENT_ID,
        scope: SCOPES,
        callback: async (response: any) => {
          if (response.error || !response.access_token) {
            reject(new Error(response.error || "–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É"));
            return;
          }

          accessToken = response.access_token;
          gapi.client.setToken(response);

          try {
            await gapi.client.init({});
            await gapi.client.load("drive", "v3");
            await testDriveConnection();
            resolve();
          } catch (err) {
            reject(handleError(err));
          }
        },
        error_callback: (err: any) => reject(handleError(err)),
      });

      tokenClient.requestAccessToken();
    });
  } catch (error) {
    throw handleError(error);
  }
}

// ================= DRIVE API =================

async function callDriveAPI(
  endpoint: string,
  options: RequestInit = {}
): Promise<any> {
  if (!accessToken) throw new Error("–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø—É");

  const response = await fetch(
    `https://www.googleapis.com/drive/v3${endpoint}`,
    {
      ...options,
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
        ...options.headers,
      },
    }
  );

  if (!response.ok) {
    throw new Error(
      `Drive API Error: ${response.status} ${response.statusText}`
    );
  }

  return response.json();
}

// ‚úÖ –ü–æ—à—É–∫ –ø–∞–ø–∫–∏ –∑–∞ appProperties.act_id (–Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–±)
async function findFolderByActId(
  actId: number,
  parentId: string | null
): Promise<string | null> {
  const parent = parentId ?? "root";
  const query = `'${parent}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false and appProperties has { key='act_id' and value='${String(
    actId
  )}' }`;
  try {
    const list = await callDriveAPI(
      `/files?q=${encodeURIComponent(query)}&fields=files(id,name)`
    );
    return list.files?.[0]?.id || null;
  } catch (e) {
    console.warn("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞ appProperties:", e);
    return null;
  }
}

async function findFolder(
  name: string,
  parentId: string | null = null
): Promise<string | null> {
  try {
    const safeName = name.replace(/'/g, "\\'");
    const query =
      `'${parentId ?? "root"}' in parents and name = '${safeName}' and ` +
      `mimeType = 'application/vnd.google-apps.folder' and trashed = false`;
    const list = await callDriveAPI(
      `/files?q=${encodeURIComponent(query)}&fields=files(id,name)`
    );
    return list.files?.[0]?.id || null;
  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–∞–ø–∫–∏:", e);
    return null;
  }
}

// ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ appProperties (act_id)
async function createFolder(
  name: string,
  parentId: string | null = null,
  appProps?: Record<string, string>
): Promise<string> {
  const body: any = {
    name,
    mimeType: "application/vnd.google-apps.folder",
    ...(parentId ? { parents: [parentId] } : {}),
  };

  if (appProps && Object.keys(appProps).length) {
    body.appProperties = appProps;
  }

  try {
    const created = await callDriveAPI("/files?fields=id", {
      method: "POST",
      body: JSON.stringify(body),
    });
    return created.id;
  } catch (e) {
    throw handleError(e);
  }
}

export async function findOrCreateFolder(
  name: string,
  parentId: string | null = null
): Promise<string> {
  const existingId = await findFolder(name, parentId);
  if (existingId) return existingId;
  return createFolder(name, parentId);
}

// ================= –ë–ê–ó–ê –î–ê–ù–ò–• =================

async function getActFullInfo(actId: number): Promise<{
  act_id: number;
  date_on: string;
  fio: string;
  phone: string;
  car: string;
  year: string;
  act_data: any;
}> {
  try {
    const { data: act, error: actError } = await supabase
      .from("acts")
      .select("*")
      .eq("act_id", actId)
      .single();

    if (actError || !act)
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–∫—Ç –∑ ID ${actId}`);

    // –ö–ª—ñ—î–Ω—Ç
    let clientInfo = { fio: "–ù–µ–≤—ñ–¥–æ–º–∏–π_–∫–ª—ñ—î–Ω—Ç", phone: "–ë–µ–∑_—Ç–µ–ª–µ—Ñ–æ–Ω—É" };
    if (act.client_id) {
      const { data: client } = await supabase
        .from("clients")
        .select("*")
        .eq("client_id", act.client_id)
        .single();

      if (client) {
        const clientData = client?.data?.data
          ? safeParseJSON(client.data.data)
          : safeParseJSON(client?.data) ?? client?.data ?? {};
        const fio =
          clientData?.["–ü–Ü–ë"] ??
          clientData?.fio ??
          client?.data?.fio ??
          client?.fio ??
          "–ù–µ–≤—ñ–¥–æ–º–∏–π_–∫–ª—ñ—î–Ω—Ç";
        const phone =
          clientData?.["–¢–µ–ª–µ—Ñ–æ–Ω"] ??
          clientData?.phone ??
          client?.data?.phone ??
          client?.phone ??
          "–ë–µ–∑_—Ç–µ–ª–µ—Ñ–æ–Ω—É";

        clientInfo = {
          fio: String(fio || "").trim() || "–ù–µ–≤—ñ–¥–æ–º–∏–π_–∫–ª—ñ—î–Ω—Ç",
          phone: String(phone || "").trim() || "–ë–µ–∑_—Ç–µ–ª–µ—Ñ–æ–Ω—É",
        };
      }
    }

    // –ê–≤—Ç–æ
    let carInfo = { auto: "–ù–µ–≤—ñ–¥–æ–º–µ_–∞–≤—Ç–æ", year: "0000" };
    if (act.cars_id) {
      const { data: car } = await supabase
        .from("cars")
        .select("*")
        .eq("cars_id", act.cars_id)
        .single();

      if (car) {
        const carData = safeParseJSON(car.data) ?? car.data ?? {};
        const auto =
          carData?.["–ê–≤—Ç–æ"] ?? carData?.auto ?? car?.auto ?? "–ù–µ–≤—ñ–¥–æ–º–µ_–∞–≤—Ç–æ";
        const year = carData?.["–†—ñ–∫"] ?? carData?.year ?? car?.year ?? "0000";

        carInfo = {
          auto: String(auto || "").trim() || "–ù–µ–≤—ñ–¥–æ–º–µ_–∞–≤—Ç–æ",
          year: String(year || "").trim() || "0000",
        };
      }
    }

    return {
      act_id: actId,
      date_on: act.date_on,
      fio: clientInfo.fio,
      phone: clientInfo.phone,
      car: carInfo.auto,
      year: carInfo.year,
      act_data: act,
    };
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–∫—Ç:", error);
    throw error;
  }
}

// ‚úÖ –ù–∞–¥—ñ–π–Ω–∏–π –∞–ø–¥–µ–π—Ç –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—î—é JSON —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞
async function updateActPhotoLink(
  actId: number,
  driveUrl: string
): Promise<void> {
  try {
    const { data: currentAct, error: fetchError } = await supabase
      .from("acts")
      .select("data")
      .eq("act_id", actId)
      .single();

    if (fetchError || !currentAct) {
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–∫—Ç –∑ ID ${actId}`);
    }

    // –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ø
    const parsed = safeParseJSON(currentAct.data);
    const actData: Record<string, any> =
      parsed && typeof parsed === "object" ? parsed : currentAct.data ?? {};

    // –ó–∞–ø–∏—Å—É—î–º–æ –º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º –ª—ñ–Ω–∫–æ–º (–∑ –∑–∞–ø–∞—Å–æ–º –Ω–∞ –º–∞–π–±—É—Ç–Ω—î ‚Äî –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—à—ñ)
    actData["–§–æ—Ç–æ"] = Array.isArray(actData["–§–æ—Ç–æ"])
      ? [driveUrl, ...actData["–§–æ—Ç–æ"].filter(Boolean)]
      : [driveUrl];

    const { data: updatedRow, error: updateError } = await supabase
      .from("acts")
      .update({ data: actData })
      .eq("act_id", actId)
      .select("data")
      .single();

    if (updateError) {
      throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç: ${updateError.message}`);
    }

    // –õ–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ UI –≤ —Ä–µ–∂–∏–º "–≤—ñ–¥–∫—Ä–∏—Ç–∏"
    const links: string[] = Array.isArray(updatedRow?.data?.["–§–æ—Ç–æ"])
      ? updatedRow.data["–§–æ—Ç–æ"]
      : actData["–§–æ—Ç–æ"];

    updatePhotoSection(links, false);

    // –Ü–∑ –ë–î –ø—ñ–¥—Ç—è–≥–Ω–µ–º–æ —â–µ —Ä–∞–∑, —â–æ–± —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω
    await refreshPhotoData(actId);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É:", error);
    throw error;
  }
}

// ================= –ú–û–î–ê–õ–¨–ù–ï –í–Ü–ö–ù–û: "–§–û–¢–û" =================

/**
 * –ú–∞–ª—é—î —Ç–µ–∫—Å—Ç —É –∫–æ–º—ñ—Ä—Ü—ñ (–∑–µ–ª–µ–Ω–∏–π ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏, —á–µ—Ä–≤–æ–Ω–∏–π ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏)
 * —ñ —Ä–æ–±–∏—Ç—å –ö–õ–Ü–ö –ü–û –í–°–Ü–ô –ö–û–ú–Ü–†–¶–Ü. –ù—ñ—è–∫–∏—Ö window.open —Ç—É—Ç ‚Äî —Ç—ñ–ª—å–∫–∏ —Ä–µ–Ω–¥–µ—Ä.
 */
export function updatePhotoSection(
  photoLinks: string[],
  isActClosed = false
): void {
  const photoCell = document.querySelector(
    "table.zakaz_narayd-table.left tr:nth-child(5) td:nth-child(2)"
  ) as HTMLTableCellElement | null;

  if (!photoCell) return;

  const hasLink =
    Array.isArray(photoLinks) && photoLinks.length > 0 && !!photoLinks[0];

  photoCell.innerHTML = hasLink
    ? `<span style="color:green; text-decoration: underline;">–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ —Ñ–æ—Ç–æ</span>`
    : `<span style="color:red; text-decoration: underline;">–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–æ—Ç–æ</span>`;

  photoCell.style.cursor = isActClosed && !hasLink ? "not-allowed" : "pointer";
  photoCell.setAttribute("aria-role", "button");

  addGoogleDriveHandler(isActClosed);
}

/**
 * –ö–ª—ñ–∫ –ø–æ –í–°–Ü–ô –∫–æ–º—ñ—Ä—Ü—ñ:
 * - —è–∫—â–æ –≤ –ë–î —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ
 * - —è–∫—â–æ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É, –∑–∞–ø–∏—Å—É—î–º–æ URL —É –ë–î, –æ–Ω–æ–≤–ª—é—î–º–æ UI (–±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
 */
export function addGoogleDriveHandler(isActClosed = false): void {
  const photoCell = document.querySelector(
    "table.zakaz_narayd-table.left tr:nth-child(5) td:nth-child(2)"
  ) as HTMLTableCellElement | null;
  if (!photoCell) return;

  // –∑–Ω—ñ–º–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª—É—Ö–∞—á, —è–∫—â–æ –±—É–≤
  (photoCell as any).__gd_click__ &&
    photoCell.removeEventListener("click", (photoCell as any).__gd_click__);

  const onClick = async (e: MouseEvent) => {
    e.preventDefault();

    if (isCreatingFolder) return; // üö´ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –º—É–ª—å—Ç–∏-–∫–ª—ñ–∫—ñ–≤

    const modal = document.getElementById("zakaz_narayd-custom-modal");
    const actIdStr = modal?.getAttribute("data-act-id");
    if (!actIdStr) return;
    const actId = Number(actIdStr);

    try {
      // —Ç—è–≥–Ω–µ–º–æ –ê–ö–¢ —ñ–∑ –ë–î ‚Äî –±–µ—Ä–µ–º–æ –õ–ò–®–ï –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      const { data: act, error } = await supabase
        .from("acts")
        .select("data, date_off")
        .eq("act_id", actId)
        .single();

      if (error || !act) {
        showNotification("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫—Ç—É", "error");
        return;
      }

      const actData = safeParseJSON(act.data) || {};
      const links: string[] = Array.isArray(actData?.["–§–æ—Ç–æ"])
        ? actData["–§–æ—Ç–æ"]
        : [];
      const hasLink = links.length > 0 && links[0];

      // –Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∂–µ —î ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ
      if (hasLink) {
        window.open(links[0], "_blank");
        return;
      }

      // –Ø–∫—â–æ –∞–∫—Ç—É ¬´–∑–∞–∫—Ä–∏—Ç–∏–π¬ª ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
      if (isActClosed || !!act.date_off) {
        showNotification(
          "–ê–∫—Ç –∑–∞–∫—Ä–∏—Ç–∏–π ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ",
          "warning"
        );
        return;
      }

      // –Ü–Ω–∞–∫—à–µ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ/–∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞–ø–∫—É (—ñ–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
      isCreatingFolder = true;
      photoCell.style.pointerEvents = "none";
      showNotification("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–ø–æ—à—É–∫ –ø–∞–ø–∫–∏ –≤ Google Drive...", "info");

      const actInfo = await getActFullInfo(actId);
      await initGoogleApi();
      await createDriveFolderStructure(actInfo); // –∑–±–µ—Ä—ñ–≥–∞—î URL —É –ë–î —Ç–∞ –æ–Ω–æ–≤–ª—é—î UI

      showNotification("–ì–æ—Ç–æ–≤–æ. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É —Ñ–æ—Ä–º—É.", "success");
    } catch (err) {
      console.error("‚ùå Google Drive –ø–æ–º–∏–ª–∫–∞:", err);
      showNotification("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É", "error");
    } finally {
      isCreatingFolder = false;
      photoCell.style.pointerEvents = "";
    }
  };

  (photoCell as any).__gd_click__ = onClick;
  photoCell.addEventListener("click", onClick);
}

/** –ü—ñ–¥—Ç—è–≥—É—î —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –ë–î —ñ –æ–Ω–æ–≤–ª—é—î —Ä–æ–∑–º—ñ—Ç–∫—É –±–ª–æ–∫—É ‚Äú–§–æ—Ç–æ‚Äù. */
export async function refreshPhotoData(actId: number): Promise<void> {
  try {
    const { data: act, error } = await supabase
      .from("acts")
      .select("data, date_off")
      .eq("act_id", actId)
      .single();

    if (error || !act) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö —Ñ–æ—Ç–æ:", error);
      return;
    }

    const actData = safeParseJSON(act.data) || {};
    const photoLinks: string[] = Array.isArray(actData?.["–§–æ—Ç–æ"])
      ? actData["–§–æ—Ç–æ"]
      : [];

    const isActClosed = !!act.date_off;
    updatePhotoSection(photoLinks, isActClosed);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ:", error);
  }
}

// ================= –û–°–ù–û–í–ù–ï: –°–¢–†–£–ö–¢–£–†–ê –ü–ê–ü–û–ö =================

/**
 * –°—Ç–≤–æ—Ä—é—î —ñ—î—Ä–∞—Ä—Ö—ñ—é –ø–∞–ø–æ–∫:
 *  - –†—ñ–∫ (yyyy) ‚Üí –ê–∫—Ç_{id}_{fio}_{car}_{year}_{phone}
 * –ü–æ—Ä—è–¥–æ–∫: (1) –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á—É –∑–∞ appProperties.act_id; (2) —è–∫—â–æ –Ω—ñ ‚Äî –∑–Ω–∞–π—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é; (3) —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑ appProperties; (4) –∑–∞–ø–∏—Å–∞—Ç–∏ URL —É –ë–î —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ UI.
 */
export async function createDriveFolderStructure({
  act_id,
  date_on,
  fio,
  phone,
  car,
  year,
}: {
  act_id: number;
  date_on: string;
  fio: string;
  phone: string;
  car: string;
  year: string;
}): Promise<void> {
  try {
    const date = new Date(date_on);
    const yyyy = String(date.getFullYear());

    // 1) –ü–∞–ø–∫–∞ —Ä–æ–∫—É
    const yearFolderId = await findOrCreateFolder(yyyy);

    // 2) –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –ø–∞–ø–∫—É –∑–∞ appProperties.act_id
    let actFolderId = await findFolderByActId(act_id, yearFolderId);

    // 3) –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî —à—É–∫–∞—î–º–æ –∑–∞ –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ—é –Ω–∞–∑–≤–æ—é
    if (!actFolderId) {
      const parts = [
        `–ê–∫—Ç_${act_id}`,
        fio && fio !== "‚Äî" && fio !== "–ù–µ–≤—ñ–¥–æ–º–∏–π_–∫–ª—ñ—î–Ω—Ç"
          ? cleanNameComponent(fio)
          : null,
        car && car !== "‚Äî" && car !== "–ù–µ–≤—ñ–¥–æ–º–µ_–∞–≤—Ç–æ"
          ? cleanNameComponent(car)
          : null,
        year && year !== "‚Äî" && year !== "0000"
          ? cleanNameComponent(year)
          : null,
        phone && phone !== "‚Äî" && phone !== "–ë–µ–∑_—Ç–µ–ª–µ—Ñ–æ–Ω—É"
          ? cleanNameComponent(phone)
          : null,
      ].filter(Boolean) as string[];

      const folderName = parts.join("_").slice(0, 100);
      actFolderId = await findFolder(folderName, yearFolderId);

      // 4) –Ø–∫—â–æ —ñ –∑–∞ –Ω–∞–∑–≤–æ—é –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ appProperties
      if (!actFolderId) {
        actFolderId = await createFolder(folderName, yearFolderId, {
          act_id: String(act_id),
        });
      }
    }

    // 5) URL ‚Üí –ë–î ‚Üí –æ–Ω–æ–≤–∏—Ç–∏ UI
    const driveUrl = `https://drive.google.com/drive/folders/${actFolderId}`;
    await updateActPhotoLink(act_id, driveUrl);
  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫:", e);
    alert(
      `–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏/–∑–Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${
        e instanceof Error ? e.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
      }. –î–µ—Ç–∞–ª—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ.`
    );
  }
}

// ================= –ê–£–¢–ï–ù–¢–ò–§–Ü–ö–ê–¶–Ü–Ø / –ö–û–†–ò–°–ù–ï =================

export function checkAuthStatus(): boolean {
  return accessToken !== null;
}

export async function signOut(): Promise<void> {
  try {
    if (accessToken && google?.accounts?.oauth2) {
      google.accounts.oauth2.revoke(accessToken);
    }
    accessToken = null;
    if (gapi?.client) gapi.client.setToken(null);
  } catch (e) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:", e);
  }
}

export async function testDriveConnection(): Promise<void> {
  await callDriveAPI("/files?pageSize=1&fields=files(id,name)");
}

export async function getCurrentUser(): Promise<any> {
  const res = await callDriveAPI("/about?fields=user");
  return res.user;
}

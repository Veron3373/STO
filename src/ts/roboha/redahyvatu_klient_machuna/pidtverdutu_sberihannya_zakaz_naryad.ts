export const saveModalIdCreate = "save-prompt-modal-create";

import { getModalFormValues } from "./vikno_klient_machuna";
import { supabase } from "../../vxid/supabaseClient";
import { loadActsTable } from "../tablucya/tablucya";
import { modalOverlayId } from "./vikno_klient_machuna";

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ—ó –º–æ–¥–∞–ª–∫–∏
export function createSaveModalCreate(): HTMLDivElement {
  const overlay = document.createElement("div");
  overlay.id = saveModalIdCreate;
  overlay.className = "modal-create-overlay";
  overlay.style.display = "none";

  const modal = document.createElement("div");
  modal.className = "modal-content-save";
  modal.innerHTML = `
    <p>–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–∫–∞–∑ –Ω–∞—Ä—è–¥?</p>
    <div class="save-buttons">
      <button id="save-confirm-create" class="btn-save-confirm">–¢–∞–∫</button>
      <button id="save-cancel-create" class="btn-save-cancel">–ù—ñ</button>
    </div>
  `;

  overlay.appendChild(modal);
  return overlay;
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –π —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD HH:mm:ss (–ª–æ–∫–∞–ª—å–Ω–∏–π)
function getCurrentDateTimeLocal(): string {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, "0");
  const day = String(now.getDate()).padStart(2, "0");
  const hours = String(now.getHours()).padStart(2, "0");
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");

  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

// –í—Å–ø–ª–∏–≤–∞—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showMessage(message: string, color: string) {
  const note = document.createElement("div");
  note.textContent = message;
  note.style.position = "fixed";
  note.style.bottom = "50%";
  note.style.left = "50%";
  note.style.transform = "translateX(-50%)";
  note.style.backgroundColor = color;
  note.style.color = "white";
  note.style.padding = "12px 24px";
  note.style.borderRadius = "8px";
  note.style.zIndex = "10001";
  note.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
  note.style.fontSize = "16px";
  document.body.appendChild(note);
  setTimeout(() => note.remove(), 2500);
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ acts
async function createActInDatabase(
  clientId: number,
  carsId: number
): Promise<boolean> {
  try {
    const dateOn = getCurrentDateTimeLocal();

    const actData = {
      –§–æ—Ç–æ: [],
      –î–µ—Ç–∞–ª—ñ: [{ –°—É–º–∞: 0, –¶—ñ–Ω–∞: 0, –î–µ—Ç–∞–ª—å: "", –ú–∞–≥–∞–∑–∏–Ω: "", –ö—ñ–ª—å–∫—ñ—Å—Ç—å: 0 }],
      –ü—Ä–æ–±—ñ–≥: 0,
      –†–æ–±–æ—Ç–∏: [{ –°—É–º–∞: 0, –¶—ñ–Ω–∞: 0, –†–æ–±–æ—Ç–∞: "", –°–ª—é—Å–∞—Ä: "", –ö—ñ–ª—å–∫—ñ—Å—Ç—å: 0 }],
      "–ó–∞ –¥–µ—Ç–∞–ª—ñ": 0,
      "–ó–∞ —Ä–æ–±–æ—Ç—É": 0,
      –ü—Ä–∏–π–º–∞–ª—å–Ω–∏–∫: "",
      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: "",
      "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞": 0,
      "–ü—Ä–∏—á–∏–Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è": "",
    };

    const { error } = await supabase.from("acts").insert([
      {
        date_on: dateOn,
        client_id: clientId,
        cars_id: carsId,
        data: actData,
      },
    ]);

    if (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–æ–≤–∏–π –∞–∫—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ", error.message);
      return false;
    }

    console.log("‚úÖ –ê–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –æ", dateOn);
    return true;
  } catch (error: any) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–∫—Ç—É –≤ Supabase:", error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—É
export function showSaveModalCreate(): Promise<boolean> {
  return new Promise((resolve) => {
    const modal = document.getElementById(saveModalIdCreate);
    document.body.appendChild(createSaveModalCreate());
    if (!modal) {
      console.warn("‚ùå –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:", saveModalIdCreate);
      return resolve(false);
    }

    modal.classList.add("active");
    modal.style.display = "flex";

    const confirmBtn = modal.querySelector(
      "#save-confirm-create"
    ) as HTMLButtonElement;
    const cancelBtn = modal.querySelector(
      "#save-cancel-create"
    ) as HTMLButtonElement;

    const cleanup = () => {
      modal.classList.remove("active");
      modal.style.display = "none";
      confirmBtn.removeEventListener("click", onConfirm);
      cancelBtn.removeEventListener("click", onCancel);
      modal.remove(); // ‚Üê –≤–∏–¥–∞–ª—è—î –ø–æ–≤–Ω—ñ—Å—Ç—é –∑ DOM
    };

    const onConfirm = async () => {
      try {
        const values = getModalFormValues();
        console.log("üÜï –î–∞–Ω—ñ –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:", JSON.stringify(values, null, 2));

        if (!values.client_id || !values.cars_id) {
          console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –¥–∞–Ω—ñ: client_id –∞–±–æ cars_id");
          showMessage("‚ùå –ù–µ –≤–∏—Å—Ç–∞—á–∞—î ID –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –∞–≤—Ç–æ", "#f44336");
          cleanup();
          return resolve(false);
        }

        confirmBtn.disabled = true;
        confirmBtn.textContent = "–°—Ç–≤–æ—Ä—é—î–º–æ...";

        const success = await createActInDatabase(
          Number(values.client_id),
          Number(values.cars_id)
        );

        if (success) {
          showMessage("‚úÖ –ó–∞–∫–∞–∑ –Ω–∞—Ä—è–¥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ", "#4caf50");
          cleanup();
          resolve(true);
          await loadActsTable(); // –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
          document.getElementById(modalOverlayId)?.remove();
        } else {
          showMessage("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–∫–∞–∑ –Ω–∞—Ä—è–¥—É", "#f44336");
          confirmBtn.disabled = false;
          confirmBtn.textContent = "–¢–∞–∫";
          resolve(false);
        }
      } catch (err: any) {
        console.error("üö® –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —É onConfirm:", err.message);
        showMessage("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–∫–∞–∑ –Ω–∞—Ä—è–¥—É", "#f44336");
        confirmBtn.disabled = false;
        confirmBtn.textContent = "–¢–∞–∫";
        cleanup();
        resolve(false);
      }
    };

    const onCancel = () => {
      cleanup();
      resolve(false);
    };

    confirmBtn.addEventListener("click", onConfirm);
    cancelBtn.addEventListener("click", onCancel);
  });
}

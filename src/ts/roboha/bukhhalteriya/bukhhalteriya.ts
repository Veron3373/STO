// src/ts/roboha/bukhhalteriya/bukhhalteriya.ts
// –£—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ showNotification. –ë–µ–∑ confirm —É –º–∞—Å–æ–≤–æ–º—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–∞–≥–∞–∑–∏–Ω—É.
import { runMassPaymentCalculation as runMassPaymentCalculationForPodlegle } from "./pidlehli";
import { runMassPaymentCalculationForMagazine } from "./shopsBuxha";
import { runMassPaymentCalculationForDetails } from "./poAktam";
import { showNotification } from "../zakaz_naraudy/inhi/vspluvauhe_povidomlenna";

import { showModal } from "../zakaz_naraudy/modalMain";
import {
  loadSlyusarsData,
  updatepodlegleTable,
  getFilteredpodlegleData,
  createNameSelect,
  createStatusToggle,
  createPaymentToggle,
  handlepodlegleAddRecord,
  deletepodlegleRecord,
  togglepodleglePayment,
} from "./pidlehli";

import {
  calculateMagazineTotalSum,
  updateMagazineTable,
  deleteMagazineRecord,
  toggleMagazinePayment,
  clearMagazineForm,
  searchMagazineData,
  createMagazinePaymentToggle,
  createMagazineAvailabilityToggle,
  createShopsSelect,
} from "./shopsBuxha";

import {
  initializeDetailsData,
  calculateDetailsTotalSum,
  updateDetailsTable,
  addDetailsRecord,
  deleteDetailsRecord,
  toggleDetailsPayment,
  clearDetailsForm,
} from "./poAktam";

type TabName = "podlegle" | "magazine" | "details";

let currentTab: TabName = "podlegle";
let selectedRowIndex: number | null = null;

export function byId<T extends HTMLElement = HTMLElement>(id: string): T {
  const el = document.getElementById(id);
  return el as T;
}

export function formatNumber(value: number): string {
  return Math.floor(value)
    .toString()
    .replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

export function formatDate(dateString: string): string {
  if (!dateString) return "-";
  const date = new Date(dateString);
  const day = date.getDate().toString().padStart(2, "0");
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const year = date.getFullYear();
  return `${day}.${month}.${year}`;
}

function calculateTotalSum(): number {
  let total = 0;

  switch (currentTab) {
    case "podlegle":
      const podlegleData = getFilteredpodlegleData();
      total = podlegleData.reduce((sum, item) => sum + (item.total || 0), 0);
      break;
    case "magazine":
      total = calculateMagazineTotalSum();
      break;
    case "details":
      total = calculateDetailsTotalSum();
      break;
  }

  return total;
}

export function updateTotalSum(): void {
  const totalSumElement = byId("total-sum");
  
  // –î–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –∞–∫—Ç–∞–º –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
  if (currentTab === "details") {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ poAktam.ts —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç—Ä–∏ —Å—É–º–∏
    if (typeof (window as any).updateDetailsDisplayedSums === "function") {
      (window as any).updateDetailsDisplayedSums();
    }
    return;
  }

  // –î–ª—è —ñ–Ω—à–∏—Ö –≤–∫–ª–∞–¥–æ–∫ ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
  const total = calculateTotalSum();
  totalSumElement.textContent = `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${formatNumber(total)} –≥—Ä–Ω`;
}

export function switchTab(e: Event, tabName: TabName) {
  const sections = document.querySelectorAll<HTMLElement>(
    ".Bukhhalter-form-section"
  );
  sections.forEach((section) => section.classList.remove("Bukhhalter-active"));

  const buttons = document.querySelectorAll<HTMLButtonElement>(
    ".Bukhhalter-tab-button"
  );
  buttons.forEach((button) => button.classList.remove("Bukhhalter-active"));

  byId<HTMLElement>("Bukhhalter-" + tabName + "-section").classList.add(
    "Bukhhalter-active"
  );

  const target = e.currentTarget as HTMLButtonElement | null;
  if (target) target.classList.add("Bukhhalter-active");

  currentTab = tabName;
  updateTableDisplay();
  updateTotalSum();
}

function updateTableDisplay(): void {
  const tableTitle = byId<HTMLDivElement>("table-title");
  const podlegleContainer = byId<HTMLDivElement>("podlegle-table-container");
  const magazineContainer = byId<HTMLDivElement>("magazine-table-container");
  const detailsContainer = byId<HTMLDivElement>("details-table-container");

  podlegleContainer.style.display = "none";
  magazineContainer.style.display = "none";
  detailsContainer.style.display = "none";

  if (currentTab === "podlegle") {
    tableTitle.innerHTML = "üë• –î–∞–Ω—ñ –ø—ñ–¥–ª–µ–≥–ª–∏—Ö";
    podlegleContainer.style.display = "block";
    updatepodlegleTable();
  } else if (currentTab === "magazine") {
    tableTitle.innerHTML = "üè™ –î–∞–Ω—ñ –º–∞–≥–∞–∑–∏–Ω—É";
    magazineContainer.style.display = "block";
    updateMagazineTable();
  } else if (currentTab === "details") {
    tableTitle.innerHTML = "üìä –ü–æ –∞–∫—Ç–∞–º";
    detailsContainer.style.display = "block";
    updateDetailsTable();
  }

  updateTotalSum();
}

function handleRowClick(index: number): void {
  if (selectedRowIndex !== null) {
    const prevRow = document.querySelector(
      `.Bukhhalter-data-table tbody tr:nth-child(${selectedRowIndex + 1})`
    );
    if (prevRow) {
      prevRow.classList.remove("selected-row");
    }
  }

  selectedRowIndex = index;
  const currentRow = document.querySelector(
    `.Bukhhalter-data-table tbody tr:nth-child(${index + 1})`
  );
  if (currentRow) {
    currentRow.classList.add("selected-row");
  }
}

function togglePayment(index: number, type: TabName): void {
  if (type === "podlegle") {
    togglepodleglePayment(index);
  } else if (type === "magazine") {
    toggleMagazinePayment(index);
  } else if (type === "details") {
    toggleDetailsPayment(index);
  }
  updateTotalSum();
}

export async function addRecord(): Promise<void> {
  if (currentTab === "podlegle") {
    handlepodlegleAddRecord();
    updateTotalSum();
    return;
  }

  if (currentTab === "magazine") {
    await Promise.resolve(searchMagazineData());
    return;
  }

  if (currentTab === "details") {
    await addDetailsRecord();
    return;
  }
}

export function deleteRecord(type: TabName, index: number): void {
  if (type === "podlegle") {
    deletepodlegleRecord(index);
  } else if (type === "magazine") {
    deleteMagazineRecord(index);
  } else if (type === "details") {
    deleteDetailsRecord(index);
  }
  updateTotalSum();
}

export function clearForm(): void {
  const activeSection = document.querySelector<HTMLElement>(
    ".Bukhhalter-form-section.Bukhhalter-active"
  );
  if (!activeSection) return;

  if (currentTab === "magazine") {
    clearMagazineForm();
    return;
  }

  if (currentTab === "details") {
    clearDetailsForm();
    return;
  }

  const inputs = activeSection.querySelectorAll<HTMLInputElement>(
    "input:not([readonly])"
  );
  inputs.forEach((input) => {
    input.value = "";
  });

  const selects = activeSection.querySelectorAll<HTMLSelectElement>("select");
  selects.forEach((select) => {
    select.value = "";
  });

  if (currentTab === "podlegle") {
    const paymentToggle = byId<HTMLInputElement>("payment-filter-toggle");
    const statusToggle = byId<HTMLInputElement>("status-filter-toggle");

    if (paymentToggle) paymentToggle.value = "2";
    if (statusToggle) statusToggle.value = "2";

    updatepodlegleTable();
  }

  updateTotalSum();
  showNotification("–§—ñ–ª—å—Ç—Ä–∏ –æ—á–∏—â–µ–Ω–æ", "info", 1500);
}

function getCurrentDateForFileName(): string {
  const now = new Date();
  const day = now.getDate().toString().padStart(2, "0");
  const month = (now.getMonth() + 1).toString().padStart(2, "0");
  const year = now.getFullYear();
  return `${day}-${month}-${year}`;
}

function downloadpodlegleToExcel(): void {
  const filteredData = getFilteredpodlegleData();

  if (filteredData.length === 0) {
    showNotification("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É", "warning");
    return;
  }

  if (typeof (window as any).XLSX === "undefined") {
    showNotification(
      "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ XLSX –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –î–æ–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —É HTML —Ñ–∞–π–ª.",
      "error",
      5000
    );
    return;
  }

  const XLSX = (window as any).XLSX;

  const excelData = filteredData.map((item) => ({
    –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: item.isPaid ? item.paymentDate || "–¢–∞–∫" : "–ù—ñ",
    "–î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è": formatDate(item.dateOpen),
    "–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è": formatDate(item.dateClose),
    –ü–Ü–ë: item.name || "",
    "–ê–∫—Ç ‚Ññ": item.act || "",
    –ö–ª—ñ—î–Ω—Ç: item.client || "",
    –ê–≤—Ç–æ–º–æ–±—ñ–ª—å: item.automobile || "",
    –†–æ–±–æ—Ç–∞: item.work || "",
    –ö—ñ–ª—å–∫—ñ—Å—Ç—å: item.quantity || 0,
    –¶—ñ–Ω–∞: item.price || 0,
    –°—É–º–∞: item.total || 0,
  }));

  const worksheet = XLSX.utils.json_to_sheet(excelData);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "–î–∞–Ω—ñ –ø—ñ–¥–ª–µ–≥–ª–∏—Ö");

  worksheet["!cols"] = [
    { wch: 15 },
    { wch: 12 },
    { wch: 12 },
    { wch: 20 },
    { wch: 10 },
    { wch: 20 },
    { wch: 15 },
    { wch: 30 },
    { wch: 10 },
    { wch: 10 },
    { wch: 12 },
  ];

  const fileName = `–î–∞–Ω—ñ_–ø—ñ–¥–ª–µ–≥–ª–∏—Ö_${getCurrentDateForFileName()}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  showNotification(
    `–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${filteredData.length} –∑–∞–ø–∏—Å—ñ–≤ –ø—ñ–¥–ª–µ–≥–ª–∏—Ö`,
    "success"
  );
}

function downloadMagazineToExcel(): void {
  if (typeof (window as any).XLSX === "undefined") {
    showNotification(
      "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ XLSX –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –î–æ–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —É HTML —Ñ–∞–π–ª.",
      "error",
      5000
    );
    return;
  }

  const XLSX = (window as any).XLSX;

  const tbody = document.querySelector(
    "#magazine-table-container .Bukhhalter-data-table tbody"
  ) as HTMLTableSectionElement | null;

  if (!tbody) {
    showNotification("–¢–∞–±–ª–∏—Ü—è –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", "error");
    return;
  }

  const rows = tbody.querySelectorAll("tr:not(.Bukhhalter-no-data)");

  if (rows.length === 0) {
    showNotification("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –º–∞–≥–∞–∑–∏–Ω—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É", "warning");
    return;
  }

  const excelData = Array.from(rows).map((row) => {
    const cells = row.querySelectorAll("td");

    const getTextContent = (index: number): string => {
      const cell = cells[index];
      if (!cell) return "";

      if (cell.querySelector("button")) {
        const text = cell.textContent || "";
        return text.replace(/üóëÔ∏è|üìã|üíæ/g, "").trim();
      }

      return cell.textContent?.trim() || "";
    };

    let totalText = getTextContent(9);
    totalText = totalText.replace(/\s+/g, "").trim();

    return {
      "–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ": getTextContent(0),
      "–ü—Ä–∏—Ö—ñ–¥": getTextContent(1),
      "–ú–∞–≥–∞–∑–∏–Ω": getTextContent(2),
      "–†–∞—Ö—É–Ω–æ–∫": getTextContent(3),
      "–ê–∫—Ç ‚Ññ": getTextContent(4),
      "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": getTextContent(5),
      "–ö–∞—Ç–∞–ª–æ–≥": getTextContent(6),
      "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": getTextContent(7),
      "–¶—ñ–Ω–∞": getTextContent(8),
      "–°—É–º–∞": totalText,
      "–ó–∞–ª–∏—à–æ–∫" : getTextContent(10),
      "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è": getTextContent(11)
    };
  });

  const worksheet = XLSX.utils.json_to_sheet(excelData);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "–î–∞–Ω—ñ –º–∞–≥–∞–∑–∏–Ω—É");

  worksheet["!cols"] = [
    { wch: 15 },
    { wch: 12 },
    { wch: 20 },
    { wch: 12 },
    { wch: 10 },
    { wch: 30 },
    { wch: 15 },
    { wch: 10 },
    { wch: 12 },
    { wch: 12 },
    { wch: 15 },
  ];

  const fileName = `–î–∞–Ω—ñ_–º–∞–≥–∞–∑–∏–Ω—É_${getCurrentDateForFileName()}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  showNotification(
    `–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${excelData.length} –∑–∞–ø–∏—Å—ñ–≤ –º–∞–≥–∞–∑–∏–Ω—É`,
    "success"
  );
}

function downloadDetailsToExcel(): void {
  if (typeof (window as any).XLSX === "undefined") {
    showNotification(
      "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ XLSX –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –î–æ–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —É HTML —Ñ–∞–π–ª.",
      "error",
      5000
    );
    return;
  }

  const XLSX = (window as any).XLSX;

  const tbody = byId<HTMLTableSectionElement>("details-tbody");
  const rows = tbody.querySelectorAll("tr:not(.Bukhhalter-no-data)");

  if (rows.length === 0) {
    showNotification("–ù–µ–º–∞—î –¥–µ—Ç–∞–ª–µ–π –ø–æ –∞–∫—Ç–∞–º –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É", "warning");
    return;
  }

  const excelData = Array.from(rows).map((row) => {
    const cells = row.querySelectorAll("td");
    
    const getTextContent = (index: number): string => {
      const cell = cells[index];
      if (!cell) return "";
      
      if (cell.querySelector("button")) {
        const text = cell.textContent || "";
        return text.replace(/üóëÔ∏è|üìã/g, "").trim();
      }
      
      return cell.textContent?.trim() || "";
    };

    const priceCell = cells[8];
    let salePrice = "-";
    let purchasePrice = "-";
    
    if (priceCell) {
      const priceTexts = priceCell.textContent?.trim().split("\n") || [];
      if (priceTexts.length >= 2) {
        purchasePrice = priceTexts[0].trim();
        salePrice = priceTexts[1].trim();
      } else if (priceTexts.length === 1) {
        salePrice = priceTexts[0].trim();
      }
    }

    return {
      "–î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è": getTextContent(0),
      "–î–∞—Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è": getTextContent(1),
      "–ê–∫—Ç ‚Ññ": getTextContent(2),
      "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å": getTextContent(3),
      "–ú–∞–≥–∞–∑–∏–Ω": getTextContent(4),
      "–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è": getTextContent(5),
      "–ö–∞—Ç–∞–ª–æ–≥": getTextContent(6),
      "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": getTextContent(7),
      "–ó–∞–∫—É–ø—ñ–≤–µ–ª—å–Ω–∞ —Ü—ñ–Ω–∞": purchasePrice,
      "–ü—Ä–æ–¥–∞–∂–Ω–∞ —Ü—ñ–Ω–∞": salePrice,
      "–°—É–º–∞": getTextContent(9),
    };
  });

  const worksheet = XLSX.utils.json_to_sheet(excelData);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "–î–µ—Ç–∞–ª—ñ –ø–æ –∞–∫—Ç–∞–º");

  worksheet["!cols"] = [
    { wch: 12 },
    { wch: 12 },
    { wch: 10 },
    { wch: 20 },
    { wch: 20 },
    { wch: 30 },
    { wch: 15 },
    { wch: 10 },
    { wch: 15 },
    { wch: 12 },
    { wch: 12 },
  ];

  const fileName = `–î–µ—Ç–∞–ª—ñ_–ø–æ_–∞–∫—Ç–∞–º_${getCurrentDateForFileName()}.xlsx`;
  XLSX.writeFile(workbook, fileName);
  showNotification(
    `–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${excelData.length} –∑–∞–ø–∏—Å—ñ–≤ –¥–µ—Ç–∞–ª–µ–π`,
    "success"
  );
}

export function downloadToExcel(): void {
  try {
    const activeTab = document.querySelector(
      ".Bukhhalter-tab-button.Bukhhalter-active"
    );
    if (!activeTab) {
      showNotification("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É", "error");
      return;
    }

    const tabText = activeTab.textContent?.trim() || "";
    if (tabText.includes("–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏")) {
      downloadpodlegleToExcel();
    } else if (tabText.includes("–ú–∞–≥–∞–∑–∏–Ω")) {
      downloadMagazineToExcel();
    } else if (tabText.includes("–ü–æ –ê–∫—Ç–∞–º")) {
      downloadDetailsToExcel();
    } else {
      showNotification("–ù–µ–≤—ñ–¥–æ–º–∞ –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É", "warning");
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –≤ Excel:", error);
    showNotification("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ Excel —Ñ–∞–π–ª—É", "error", 5000);
  }
}

export async function runMassPaymentCalculation(): Promise<void> {
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —Ç–∞–±–ª–∏—Ü—å
  const podlegleTable = document.getElementById("podlegle-table-container") as HTMLElement | null;
  const magazineTable = document.getElementById("magazine-table-container") as HTMLElement | null;
  const detailsTable = document.getElementById("details-table-container") as HTMLElement | null;

  const isPodlegleVisible = podlegleTable && podlegleTable.style.display !== "none";
  const isMagazineVisible = magazineTable && magazineTable.style.display !== "none";
  const isDetailsVisible = detailsTable && detailsTable.style.display !== "none";

  try {
    if (isPodlegleVisible) {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø—ñ–¥–ª–µ–≥–ª–∏—Ö
      console.log("üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –ø—ñ–¥–ª–µ–≥–ª–∏—Ö");
      await runMassPaymentCalculationForPodlegle();
    } else if (isMagazineVisible) {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É
      console.log("üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—É");
      await runMassPaymentCalculationForMagazine();
    } else if (isDetailsVisible) {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –∞–∫—Ç–∞–º
      console.log("üîÑ –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–∞—Å–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π");
      await runMassPaymentCalculationForDetails();
    } else {
      showNotification(
        "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∫–ª–∞–¥–∫—É üë• –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏, üè™ –ú–∞–≥–∞–∑–∏–Ω –∞–±–æ üìä –ü–æ –ê–∫—Ç–∞–º",
        "info"
      );
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞—Å–æ–≤–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:", error);
    showNotification("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞—Å–æ–≤–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É", "error");
  }
}

function initializeDateInputs(): void {
  const dateInputs =
    document.querySelectorAll<HTMLInputElement>('input[type="date"]');

  dateInputs.forEach((input) => {
    input.addEventListener("click", function () {
      (this as any).showPicker?.();
    });

    input.addEventListener("focus", function () {
      (this as any).showPicker?.();
    });

    input.addEventListener("change", function () {
      console.log(`–î–∞—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞: ${this.id} = ${this.value}`);
    });
  });
}

window.addEventListener("load", async function () {
  console.log("–ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—ó...");

  try {
    await loadSlyusarsData();
    initializeDetailsData();

    createStatusToggle();
    createPaymentToggle();
    createNameSelect();

    createMagazinePaymentToggle();
    createMagazineAvailabilityToggle();
    createShopsSelect();

    updateTableDisplay();
    initializeDateInputs();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:", error);
  }
});

function openActModal(act: string | number) {
  const id = parseInt(String(act), 10);
  if (!Number.isFinite(id) || id <= 0) {
    showNotification("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∞–∫—Ç—É", "warning");
    return;
  }
  showModal(id);
}

// @ts-ignore
(window as any).openActModal = openActModal;
// @ts-ignore
(window as any).showModal = showModal;

// –ì–ª–æ–±–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è HTML
// @ts-ignore
window.switchTab = switchTab;
// @ts-ignore
window.addRecord = addRecord;
// @ts-ignore
window.clearForm = clearForm;
// @ts-ignore
window.downloadToExcel = downloadToExcel;
// @ts-ignore
window.deleteRecord = deleteRecord;
// @ts-ignore
window.handleRowClick = handleRowClick;
// @ts-ignore
window.togglePayment = togglePayment;
// @ts-ignore
window.runMassPaymentCalculation = runMassPaymentCalculation;
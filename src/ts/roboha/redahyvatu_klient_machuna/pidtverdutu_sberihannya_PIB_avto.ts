export const savePromptModalId = "save-prompt-modal";
import { supabase } from "../../vxid/supabaseClient";
import { getModalFormValues, userConfirmation } from "./vikno_klient_machuna";

// –°—Ç–≤–æ—Ä—é—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
export function createSavePromptModal(): HTMLDivElement {
  const overlay = document.createElement("div");
  overlay.id = savePromptModalId;
  overlay.className = "modal-overlay-save";
  overlay.style.display = "none";

  const modal = document.createElement("div");
  modal.className = "modal-content-save";
  modal.innerHTML = `
    <p>–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏?</p>
    <div class="save-buttons">
      <button id="save-confirm" class="btn-save-confirm">–¢–∞–∫</button>
      <button id="save-cancel" class="btn-save-cancel">–ù—ñ</button>
    </div>
  `;
  overlay.appendChild(modal);
  return overlay;
}

// –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –æ–±—ñ—Ü—è–Ω–∫–æ—é
export function showSavePromptModal(): Promise<boolean> {
  return new Promise((resolve) => {
    const modal = document.getElementById(savePromptModalId);
    if (!modal) return resolve(false);

    modal.style.display = "flex";

    const confirmBtn = document.getElementById("save-confirm")!;
    const cancelBtn = document.getElementById("save-cancel")!;

    const cleanup = () => {
      modal.style.display = "none";
      confirmBtn.removeEventListener("click", onConfirm);
      cancelBtn.removeEventListener("click", onCancel);
    };

    const showMessage = (message: string, color: string) => {
      const note = document.createElement("div");
      note.textContent = message;
      note.style.position = "fixed";
      note.style.bottom = "50%";
      note.style.left = "50%";
      note.style.transform = "translateX(-50%)";
      note.style.backgroundColor = color;
      note.style.color = "white";
      note.style.padding = "12px 24px";
      note.style.borderRadius = "8px";
      note.style.zIndex = "10001";
      note.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
      note.style.fontSize = "16px";
      document.body.appendChild(note);
      setTimeout(() => note.remove(), 2500);
    };

    const onConfirm = () => {
      cleanup();
      showMessage("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", "#4caf50");
      resolve(true);
    };

    const onCancel = () => {
      cleanup();
      showMessage("‚úñ –°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º", "#f44336");
      resolve(false);
    };

    confirmBtn.addEventListener("click", onConfirm);
    cancelBtn.addEventListener("click", onCancel);
  });
}

// –í–∏–¥–∞–ª—è—î –∞–≤—Ç–æ –∑ –±–∞–∑–∏
async function deleteCarFromDatabase(carsId: string): Promise<void> {
  const { error } = await supabase.from("cars").delete().eq("cars_id", carsId);
  if (error) console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", error.message);
  else console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π");
}

// –î–æ–¥–∞—î –∞–≤—Ç–æ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
async function addCarToDatabase(clientId: string, carData: any): Promise<void> {
  const { error } = await supabase.from("cars").insert({
    client_id: clientId,
    data: {
      –ê–≤—Ç–æ: carData.carModel,
      "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": carData.carNumber,
      –û–± º—î–º: carData.engine,
      –ü–∞–ª—å–Ω–µ: carData.fuel,
      Vincode: carData.vin,
      –†—ñ–∫: carData.year,
      –ö–æ–¥–î–í–ó: carData.carCode,
    },
  });
  if (error) console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", error.message);
  else console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ");
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–ø—Ä–∞—Ü—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ ‚ùå ‚ûï üîÅ)
export async function saveClientAndCarToDatabase(): Promise<void> {
  const values = getModalFormValues();
  if (!values.fullName || !values.phone) {
    console.error("‚ùå –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (–ü–Ü–ë, –¢–µ–ª–µ—Ñ–æ–Ω) –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ");
    return;
  }

  // ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
  if (userConfirmation === "no" && values.cars_id) {
    await deleteCarFromDatabase(values.cars_id);
    return;
  }

  // ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∞–±–æ –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º
  if (userConfirmation === "yes") {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç —ñ–∑ —Ç–∞–∫–∏–º –ü–Ü–ë
    const { data: existingClients, error: fetchError } = await supabase
      .from("clients")
      .select("client_id, data")
      .ilike("data->>–ü–Ü–ë", `%${values.fullName.trim()}%`);

    if (fetchError) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞:", fetchError.message);
      return;
    }

    if (existingClients && existingClients.length > 0) {
      // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥–∞—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –¥–ª—è –≤–∏–±–æ—Ä—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
      const existingClient = existingClients[0];
      values.client_id = existingClient.client_id; // –ü—Ä–∏—Å–≤–æ—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π client_id
      await addCarToDatabase(existingClient.client_id, values);
      console.log(
        `‚úÖ –ê–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–æ–¥–∞–Ω–æ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (ID: ${existingClient.client_id})`
      );
    } else {
      // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ
      const { data: insertedClient, error: insertClientError } = await supabase
        .from("clients")
        .insert({
          data: {
            –ü–Ü–ë: values.fullName,
            –¢–µ–ª–µ—Ñ–æ–Ω: values.phone,
            –î–∂–µ—Ä–µ–ª–æ: values.income,
            –î–æ–¥–∞—Ç–∫–æ–≤—ñ: values.extra,
          },
        })
        .select("client_id")
        .single();

      if (insertClientError || !insertedClient?.client_id) {
        console.error(
          "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞:",
          insertClientError?.message
        );
        return;
      }

      await addCarToDatabase(insertedClient.client_id, values);
      console.log(
        `‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (ID: ${insertedClient.client_id}) —Ç–∞ –¥–æ–¥–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å`
      );
    }
    return;
  }

  // üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ —ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
  if (userConfirmation === null && values.client_id) {
    const { error: clientError } = await supabase
      .from("clients")
      .update({
        data: {
          –ü–Ü–ë: values.fullName,
          –¢–µ–ª–µ—Ñ–æ–Ω: values.phone,
          –î–∂–µ—Ä–µ–ª–æ: values.income,
          –î–æ–¥–∞—Ç–∫–æ–≤—ñ: values.extra,
        },
      })
      .eq("client_id", values.client_id);

    if (clientError) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:", clientError.message);
    } else {
      console.log("‚úÖ –ö–ª—ñ—î–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–∏–π");
    }

    if (values.cars_id) {
      const { error: carError } = await supabase
        .from("cars")
        .update({
          data: {
            –ê–≤—Ç–æ: values.carModel,
            "–ù–æ–º–µ—Ä –∞–≤—Ç–æ": values.carNumber,
            –û–± º—î–º: values.engine,
            –ü–∞–ª—å–Ω–µ: values.fuel,
            Vincode: values.vin,
            –†—ñ–∫: values.year,
            –ö–æ–¥–î–í–ó: values.carCode,
          },
        })
        .eq("cars_id", values.cars_id);

      if (carError) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ:", carError.message);
      } else {
        console.log("‚úÖ –ê–≤—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");
      }
    }
    return;
  }

  console.warn("‚ö†Ô∏è –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Å—Ç–∞–Ω –∞–±–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î ID. –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
}

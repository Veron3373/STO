// src/ts/roboha/zakaz_naraudy/inhi/vikno_vvody_parolu.ts
import { showNotification } from "./vspluvauhe_povidomlenna";
import { reopenActAndClearSlyusars } from "./save_work";
import { refreshActsTable } from "../../tablucya/tablucya";
import { supabase } from "../../../vxid/supabaseClient"; // –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç supabase
export const viknoVvodyParoluId = "vikno_vvody_parolu-modal";
const TARGET_USER_NAME = "–ë—Ä–∞—Ü–ª–∞–≤–µ—Ü—å –ë. –°."; // –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É
/** –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DOM –µ–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–∞–ª–∫–∏ */
export function createViknoVvodyParolu(): HTMLDivElement {
  const overlay = document.createElement("div");
  overlay.id = viknoVvodyParoluId;
  overlay.className = "vikno_vvody_parolu-overlay";
  overlay.style.display = "none";
  const modal = document.createElement("div");
  modal.className = "vikno_vvody_parolu-content modal-content-save";
  modal.innerHTML = `
    <p>–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–∫—Ç—É:</p>
    <input type="password" id="password-input" placeholder="–ü–∞—Ä–æ–ª—å" class="password-input" style="padding: 10px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 8px; width: calc(100% - 20px);">
    <div class="vikno_vvody_parolu-buttons save-buttons">
      <button id="password-confirm-btn" class="btn-save-confirm">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>
      <button id="password-cancel-btn" class="btn-save-cancel">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
    </div>
  `;
  overlay.appendChild(modal);
  return overlay;
}
/** –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥–≤—ñ—Å–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É –≤ DOM (—è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞) */
function ensureModalMounted(): HTMLElement {
  let el = document.getElementById(viknoVvodyParoluId);
  if (!el) {
    el = createViknoVvodyParolu();
    document.body.appendChild(el);
  }
  return el;
}
/** –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö */
async function getPasswordFromDatabase(): Promise<string | number | null> {
  try {
    console.log("üîç –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", TARGET_USER_NAME);

    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ JSON –∑–∞–ø–∏—Ç
    const { data: singleData, error: singleError } = await supabase
      .from("slyusars")
      .select("data")
      .eq("data->>Name", TARGET_USER_NAME)
      .single();
    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç JSON –∑–∞–ø–∏—Ç—É:", { singleData, singleError });
    if (
      !singleError &&
      singleData &&
      singleData.data &&
      singleData.data.–ü–∞—Ä–æ–ª—å !== undefined
    ) {
      console.log(
        "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JSON –∑–∞–ø–∏—Ç. –ü–∞—Ä–æ–ª—å:",
        singleData.data.–ü–∞—Ä–æ–ª—å,
        "–¢–∏–ø:",
        typeof singleData.data.–ü–∞—Ä–æ–ª—å
      );
      return singleData.data.–ü–∞—Ä–æ–ª—å;
    }
    // –Ø–∫—â–æ JSON –∑–∞–ø–∏—Ç –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —ñ —à—É–∫–∞—î–º–æ –≤—Ä—É—á–Ω—É
    console.log("üîÑ JSON –∑–∞–ø–∏—Ç –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —à—É–∫–∞—î–º–æ –≤—Ä—É—á–Ω—É...");

    const { data: allData, error: allError } = await supabase
      .from("slyusars")
      .select("slyusar_id, data");
    if (allError) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –≤—Å—ñ—Ö slyusars:", allError.message);
      return null;
    }
    console.log("üìã –í—Å—ñ –∑–∞–ø–∏—Å–∏ slyusars:", allData);
    // –®—É–∫–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—Ä—É—á–Ω—É
    for (const record of allData || []) {
      console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ø–∏—Å:", record);

      if (record.data && record.data.Name) {
        console.log("üë§ –Ü–º'—è –≤ –∑–∞–ø–∏—Å—ñ:", `"${record.data.Name}"`);
        console.log("üéØ –®—É–∫–∞–Ω–µ —ñ–º'—è:", `"${TARGET_USER_NAME}"`);
        console.log("üìè –°–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å:", record.data.Name === TARGET_USER_NAME);

        if (record.data.Name === TARGET_USER_NAME) {
          console.log("‚úÖ –ó–Ω–∞–π—à–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞! –ü–æ–≤–Ω—ñ –¥–∞–Ω—ñ:", record.data);

          if (record.data.–ü–∞—Ä–æ–ª—å !== undefined) {
            return record.data.–ü–∞—Ä–æ–ª—å;
          } else {
            console.warn("‚ö†Ô∏è –ü–æ–ª–µ '–ü–∞—Ä–æ–ª—å' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ data");
            return null;
          }
        }
      }
    }
    console.warn(
      `‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${TARGET_USER_NAME} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Å–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—ñ–≤`
    );
    return null;
  } catch (e) {
    console.error("üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∞—Ä–æ–ª—è –∑ –ë–î:", e);
    return null;
  }
}
/** –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è */
async function verifyPassword(enteredPassword: string): Promise<boolean> {
  console.log("üîê –ü–æ—á–∞—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–∞—Ä–æ–ª—è. –í–≤–µ–¥–µ–Ω–æ:", enteredPassword);

  const dbPassword = await getPasswordFromDatabase();

  if (dbPassword === null) {
    console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä–æ–ª—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö");
    return false;
  }
  // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å –∑ –ø–∞—Ä–æ–ª–µ–º –∑ –ë–î
  // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ–±–∏–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ä—è–¥–∫–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
  const enteredStr = enteredPassword.toString().trim();
  const dbPasswordStr = dbPassword.toString().trim();

  console.log("üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤:");
  console.log(" –í–≤–µ–¥–µ–Ω–∏–π:", `"${enteredStr}"`, "–î–æ–≤–∂–∏–Ω–∞:", enteredStr.length);
  console.log(" –ó –ë–î:", `"${dbPasswordStr}"`, "–î–æ–≤–∂–∏–Ω–∞:", dbPasswordStr.length);
  console.log(" –°–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å:", enteredStr === dbPasswordStr);

  return enteredStr === dbPasswordStr;
}
/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ —Ç–∞ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—î –í–Ü–î–ö–†–ò–¢–¢–Ø –ê–ö–¢–£:
 * - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä–æ–ª—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö,
 * - –≤–∏—Å—Ç–∞–≤–ª—è—î acts.date_off = null,
 * - —É slyusars.data.–Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –¥–Ω—è —Ç–∞ –ê–∫—Ç—É —Å—Ç–∞–≤–∏—Ç—å "–î–∞—Ç–∞–ó–∞–∫—Ä–∏—Ç—Ç—è" = null.
 * –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ; false ‚Äî —è–∫—â–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞/–Ω–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.
 */
export function showViknoVvodyParolu(actId: number): Promise<boolean> {
  return new Promise((resolve) => {
    const modal = ensureModalMounted();
    modal.style.display = "flex";
    const passwordInput = document.getElementById(
      "password-input"
    ) as HTMLInputElement | null;
    const confirmBtn = document.getElementById(
      "password-confirm-btn"
    ) as HTMLButtonElement | null;
    const cancelBtn = document.getElementById(
      "password-cancel-btn"
    ) as HTMLButtonElement | null;
    if (!passwordInput || !confirmBtn || !cancelBtn) {
      console.error("–ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥–∞–ª–∫–∏ –ø–∞—Ä–æ–ª—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ");
      modal.style.display = "none";
      return resolve(false);
    }
    // –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—ñ–≤
    passwordInput.value = "";
    passwordInput.focus();
    const cleanup = () => {
      modal.style.display = "none";
      confirmBtn.removeEventListener("click", onConfirm);
      cancelBtn.removeEventListener("click", onCancel);
      passwordInput.removeEventListener("keypress", onKeyPress);
    };
    const onCancel = () => {
      cleanup();
      resolve(false);
    };
    const tryOpen = async () => {
      confirmBtn.disabled = true;
      try {
        showNotification("–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∞–∫—Ç...", "info", 1200);
        await reopenActAndClearSlyusars(actId);
        await refreshActsTable();
        cleanup();
        resolve(true);
      } catch (e: any) {
        console.error(e);
        showNotification(
          "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –∞–∫—Ç—É: " + (e?.message || e),
          "error",
          2500
        );
        confirmBtn.disabled = false; // –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏
      }
    };
    const onConfirm = async () => {
      const entered = passwordInput.value;

      // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      confirmBtn.disabled = true;
      confirmBtn.textContent = "–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...";

      try {
        const isPasswordCorrect = await verifyPassword(entered);

        if (isPasswordCorrect) {
          showNotification("–ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π", "success", 800);
          await tryOpen();
        } else {
          showNotification("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å", "error", 1500);
          passwordInput.value = "";
          passwordInput.focus();
          // –º–æ–¥–∞–ª–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∞
        }
      } catch (e) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–∞—Ä–æ–ª—è:", e);
        showNotification("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è", "error", 2000);
      } finally {
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
        confirmBtn.disabled = false;
        confirmBtn.textContent = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏";
      }
    };
    const onKeyPress = (ev: KeyboardEvent) => {
      if (ev.key === "Enter") onConfirm();
      if (ev.key === "Escape") onCancel();
    };
    confirmBtn.addEventListener("click", onConfirm);
    cancelBtn.addEventListener("click", onCancel);
    passwordInput.addEventListener("keypress", onKeyPress);
  });
}

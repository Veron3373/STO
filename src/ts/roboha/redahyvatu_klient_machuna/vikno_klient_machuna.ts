//src\ts\roboha\redahyvatu_klient_machuna\vikno_klient_machuna.ts
import { supabase } from "../../vxid/supabaseClient";
import "../../../scss/main.scss";
import { loadActsTable } from "../tablucya/tablucya";
import { saveClientAndCarToDatabase } from "./pidtverdutu_sberihannya_PIB_avto";

import {
  createSavePromptModal,
  showSavePromptModal,
  savePromptModalId,
} from "./pidtverdutu_sberihannya_PIB_avto";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
function formatPhoneNumber(value: string): string {
  // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
  const digits = value.replace(/\D/g, "");

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≤–≤–æ–¥–∏—Ç–∏ –∑ 380, –∑–∞–ª–∏—à–∞—î–º–æ —Ü–µ
  if (digits.startsWith("380")) {
    const number = digits.slice(3); // –í–∏–¥–∞–ª—è—î–º–æ 380
    if (number.length === 0) return "+380";
    if (number.length <= 2) return `+380(${number}`;
    if (number.length <= 5)
      return `+380(${number.slice(0, 2)})${number.slice(2)}`;
    if (number.length <= 7)
      return `+380(${number.slice(0, 2)})${number.slice(2, 5)}-${number.slice(
        5
      )}`;
    return `+380(${number.slice(0, 2)})${number.slice(2, 5)}-${number.slice(
      5,
      7
    )}-${number.slice(7, 9)}`;
  }

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≤–≤–æ–¥–∏—Ç–∏ –±–µ–∑ 380, –¥–æ–¥–∞—î–º–æ +380 –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
  if (digits.length === 0) return "+380";
  if (digits.length <= 2) return `+380(${digits}`;
  if (digits.length <= 5)
    return `+380(${digits.slice(0, 2)})${digits.slice(2)}`;
  if (digits.length <= 7)
    return `+380(${digits.slice(0, 2)})${digits.slice(2, 5)}-${digits.slice(
      5
    )}`;
  return `+380(${digits.slice(0, 2)})${digits.slice(2, 5)}-${digits.slice(
    5,
    7
  )}-${digits.slice(7, 9)}`;
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é getModalFormValues
export function getModalFormValues() {
  const get = (id: string) =>
    (document.getElementById(id) as HTMLInputElement | null)?.value || "";

  const phoneValue = get(phoneInputId);

  return {
    client_id: selectedClientId,
    cars_id: selectedCarId,
    fullName: get(clientInputId),
    phone: phoneValue, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX
    carModel: get(carModelInputId),
    carCode: get(carCodeInputId),
    carNumber: get(carNumberInputId),
    engine: get(carEngineInputId),
    fuel: get(carFuelInputId),
    vin: get(carVinInputId),
    income: get(carIncomeInputId),
    extra: get(extraInputId),
    year: get(carYearInputId),
  };
}

function resetFormState() {
  selectedClientId = null;
  selectedCarId = null;
  userConfirmation = null;

  const confirmOverlay = document.getElementById(savePromptModalId);
  if (confirmOverlay) confirmOverlay.classList.remove("active");
}

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏ (–∫–µ—à—É–≤–∞–Ω–Ω—è)
export const modalOverlayId = "custom-modal-create-sakaz_narad";
const modalClass = "modal-content-create-sakaz_narad";
const modalCloseBtnId = "close-create-sakaz_narad";
const btnEditId = "btn-edit-create-sakaz_narad";
const clientInputId = "client-input-create-sakaz_narad";
const clientListId = "client-list-create-sakaz_narad";
const carModelInputId = "car-model-create-sakaz_narad";
const carModelListId = "car-model-list-create-sakaz_narad";
const phoneInputId = "phone-create-sakaz_narad";
const phoneListId = "phone-list-create-sakaz_narad";
const carNumberInputId = "car-number-input-create-sakaz_narad";
const carNumberListId = "car-number-list-create-sakaz_narad";
const carEngineInputId = "car-engine-create-sakaz_narad";
const carEngineListId = "car-engine-list-create-sakaz_narad";
const carFuelInputId = "car-fuel-create-sakaz_narad";
const carVinInputId = "car-vin-create-sakaz_narad";
const carVinListId = "car-vin-list-create-sakaz_narad";
const carIncomeInputId = "car-income-create-sakaz_narad";
const extraInputId = "extra-create-sakaz_narad";
const btnSaveId = "btn-save-create-sakaz_narad";
const carYearInputId = "car-year-create-sakaz_narad";
const carCodeInputId = "car-code-create-sakaz_narad";
const carCodeListId = "car-code-list-create-sakaz_narad";
const btnCreateId = "btn-create-create-sakaz_narad";

//–í–∏–≤–µ–¥–µ–Ω–Ω—è client_id —Ç–∞ client_id
let selectedClientId: string | null = null;
let selectedCarId: string | null = null;

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
let currentAutocompletes: { [key: string]: any } = {};

//–¢–∞–∫ –∞–±–æ –Ω—ñ
export let userConfirmation: "no" | "yes" | null = null;

// –û–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
let allUniqueData: {
  carModels: string[];
  carCodes: string[];
  phones: string[];
  carNumbers: string[];
  engines: string[];
  vins: string[];
} = {
  carModels: [],
  carCodes: [],
  phones: [],
  carNumbers: [],
  engines: [],
  vins: [],
};

//–í–∏–≤–µ–¥–µ–Ω–Ω—è client_id —Ç–∞ client_id
function isLocked(): boolean {
  const editButton = document.getElementById(btnEditId);
  return editButton?.getAttribute("data-unlocked") !== "true";
}

function createModalElement(): HTMLDivElement {
  const modalOverlay = document.createElement("div");
  modalOverlay.id = modalOverlayId;
  modalOverlay.className = "modal-overlay-create-sakaz_narad";

  const modal = document.createElement("div");
  modal.className = modalClass;

  modal.innerHTML = `
    <button id="${modalCloseBtnId}" class="modal-close-create-sakaz_narad">&times;</button>
    <div class="modal-header-create-sakaz_narad">
      <h2>üîç –ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞</h2>
    </div>
    ${createInputFields()}
    <div class="buttons-create-sakaz_narad">
      <button id="${btnEditId}" class="btn-action-create-sakaz_narad btn-edit" title="–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –ø–æ–ª—è">üîí</button>
      <button id="${btnSaveId}" class="btn-action-create-sakaz_narad btn-save" title="–ó–±–µ—Ä–µ–≥—Ç–∏">üíæ</button>    
      <button id="${btnCreateId}" class="btn-action-create-sakaz_narad btn-create" title="–°—Ç–≤–æ—Ä–∏—Ç–∏">üìù</button>
      </div>
  `;
  modalOverlay.appendChild(modal);
  return modalOverlay;
}

function createInputFields(): string {
  return `
    <div class="field-create-sakaz_narad">
      <label for="${clientInputId}">–ü–Ü–ë</label>
      <input type="text" id="${clientInputId}" class="input-create-sakaz_narad" placeholder="–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë" autocomplete="off" />
      <ul id="${clientListId}" class="suggestions-list-create-sakaz_narad"></ul>
    </div>

    <div class="field-create-sakaz_narad">
      <label for="${phoneInputId}">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</label>
      <div class="phone-field-inline">
        <input type="text" id="${phoneInputId}" class="input-create-sakaz_narad" placeholder="+380(XX)XXX-XX-XX" autocomplete="off" />
        <div id="car-confirm-icons" class="car-confirm-icons">
          <button id="confirm-toggle" class="confirm-button yes" title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è">‚úîÔ∏è</button>
        </div>
      </div>
      <ul id="${phoneListId}" class="suggestions-list-create-sakaz_narad"></ul>
    </div>

    <div class="car-field-inline">
      <div class="field-create-sakaz_narad car-input-group">
        <label for="${carModelInputId}">–ê–≤—Ç–æ–º–æ–±—ñ–ª—å</label>
        <input type="text" id="${carModelInputId}" class="input-create-sakaz_narad" placeholder="–ê–≤—Ç–æ–º–æ–±—ñ–ª—å" />
        <ul id="${carModelListId}" class="suggestions-list-create-sakaz_narad"></ul>
      </div>

      <div class="field-create-sakaz_narad car-code-input-group">
        <label for="${carNumberInputId}">–ù–æ–º–µ—Ä –∞–≤—Ç–æ</label>
        <input type="text" id="${carNumberInputId}" class="input-create-sakaz_narad" placeholder="–ù–æ–º–µ—Ä –∞–≤—Ç–æ" autocomplete="off" />
        <ul id="${carNumberListId}" class="suggestions-list-create-sakaz_narad"></ul>
      </div>

      <div class="field-create-sakaz_narad year-input-group">
        <label for="${carYearInputId}">–†—ñ–∫</label>
        <input type="text" id="${carYearInputId}" class="input-create-sakaz_narad" readonly />
      </div>
    </div>

    <div class="field-row-create-sakaz_narad">
      <div class="field-create-sakaz_narad">
        <label for="${carEngineInputId}">–û–± º—î–º</label>
        <input type="text" id="${carEngineInputId}" class="input-create-sakaz_narad" readonly />
        <ul id="${carEngineListId}" class="suggestions-list-create-sakaz_narad"></ul>
      </div>

      <div class="field-create-sakaz_narad car-code-input-group">
        <label for="${carCodeInputId}">–ö–æ–¥ –î–í–ó</label>
        <input type="text" id="${carCodeInputId}" class="input-create-sakaz_narad" readonly />
        <ul id="${carCodeListId}" class="suggestions-list-create-sakaz_narad"></ul>
      </div>

      <div class="field-create-sakaz_narad">
        <label for="${carFuelInputId}">–ü–∞–ª—å–Ω–µ</label>
        <input type="text" id="${carFuelInputId}" class="input-create-sakaz_narad" readonly />
      </div>
    </div>

    <div class="field-row-create-sakaz_narad">
      <div class="field-create-sakaz_narad">
        <label for="${carVinInputId}">VIN-–∫–æ–¥</label>
        <input type="text" id="${carVinInputId}" class="input-create-sakaz_narad" readonly />
        <ul id="${carVinListId}" class="suggestions-list-create-sakaz_narad"></ul>
      </div>

      <div class="field-create-sakaz_narad">
        <label for="${carIncomeInputId}">–î–∂–µ—Ä–µ–ª–æ</label>
        <input type="text" id="${carIncomeInputId}" class="input-create-sakaz_narad" readonly />
      </div>
    </div>

    <div class="field-create-sakaz_narad">
      <label for="${extraInputId}">–î–æ–¥–∞—Ç–∫–æ–≤–æ</label>
      <input type="text" id="${extraInputId}" class="input-create-sakaz_narad" readonly />
    </div>
  `;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
function setupPhoneFormatting(phoneInput: HTMLInputElement) {
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  if (!phoneInput.value) {
    phoneInput.value = "+380";
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ
  phoneInput.addEventListener("input", (e) => {
    const target = e.target as HTMLInputElement;
    const cursorPosition = target.selectionStart || 0;
    const oldValue = target.value;
    const newValue = formatPhoneNumber(target.value);

    target.value = newValue;

    // –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫—É—Ä—Å–æ—Ä–∞
    const lengthDiff = newValue.length - oldValue.length;
    const newCursorPosition = cursorPosition + lengthDiff;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ä—Å–æ—Ä —É –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
    setTimeout(() => {
      target.setSelectionRange(newCursorPosition, newCursorPosition);
    }, 0);
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ–∫—É—Å—É - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫—É—Ä—Å–æ—Ä –≤ –∫—ñ–Ω–µ—Ü—å
  phoneInput.addEventListener("focus", () => {
    if (phoneInput.value === "+380") {
      setTimeout(() => {
        phoneInput.setSelectionRange(
          phoneInput.value.length,
          phoneInput.value.length
        );
      }, 0);
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–ª–∞–≤—ñ—à (–¥–ª—è –æ–±—Ä–æ–±–∫–∏ backspace —ñ delete)
  phoneInput.addEventListener("keydown", (e) => {
    const target = e.target as HTMLInputElement;
    const cursorPosition = target.selectionStart || 0;

    // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–¥–∞–ª—è—Ç–∏ +380
    if ((e.key === "Backspace" || e.key === "Delete") && cursorPosition <= 4) {
      e.preventDefault();
      return;
    }
  });
}

function setupAutocomplete(
  input: HTMLInputElement,
  list: HTMLUListElement,
  items: any[],
  labelFn: (i: any) => string,
  onSelect: (i: any) => void,
  showOnFocus: boolean = false,
  key?: string
) {
  // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —è–∫—â–æ —ñ—Å–Ω—É—é—Ç—å
  if (key && currentAutocompletes[key]) {
    const oldData = currentAutocompletes[key];
    input.removeEventListener("input", oldData.inputHandler);
    input.removeEventListener("focus", oldData.focusHandler);
    input.removeEventListener("blur", oldData.blurHandler);
  }

  const inputHandler = () => render();
  const focusHandler = () => {
    if (showOnFocus) {
      renderAll();
    } else {
      render();
    }
  };
  const blurHandler = () => setTimeout(() => (list.innerHTML = ""), 150);

  input.addEventListener("input", inputHandler);
  input.addEventListener("focus", focusHandler);
  input.addEventListener("blur", blurHandler);

  // –ó–±–µ—Ä–µ–≥—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è
  if (key) {
    currentAutocompletes[key] = {
      inputHandler,
      focusHandler,
      blurHandler,
    };
  }

  function render() {
    list.innerHTML = "";
    const val = input.value.toLowerCase();
    if (val.length === 0 && !showOnFocus) return;

    const filtered = items.filter((i) =>
      labelFn(i).toLowerCase().includes(val)
    );
    filtered.forEach((i) => {
      const li = document.createElement("li");
      li.textContent = labelFn(i);
      li.addEventListener("click", () => {
        input.value = labelFn(i);
        list.innerHTML = "";
        onSelect(i);
      });
      list.appendChild(li);
    });
  }

  function renderAll() {
    list.innerHTML = "";
    items.forEach((i) => {
      const li = document.createElement("li");
      li.textContent = labelFn(i);
      li.addEventListener("click", () => {
        input.value = labelFn(i);
        list.innerHTML = "";
        onSelect(i);
      });
      list.appendChild(li);
    });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö —Ä—è–¥–∫—ñ–≤
function setupSimpleAutocomplete(
  input: HTMLInputElement,
  list: HTMLUListElement,
  items: string[],
  onSelect?: (item: string) => void,
  key?: string
) {
  setupAutocomplete(
    input,
    list,
    items,
    (item) => item,
    (item) => {
      if (onSelect) onSelect(item);
    },
    true,
    key
  );
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é fillCarFields
function fillCarFields(car: any) {
  (document.getElementById(carEngineInputId) as HTMLInputElement).value =
    car["–û–± º—î–º"] || "";
  (document.getElementById(carFuelInputId) as HTMLInputElement).value =
    car["–ü–∞–ª—å–Ω–µ"] || "";
  (document.getElementById(carVinInputId) as HTMLInputElement).value =
    car["Vincode"] || "";
  (document.getElementById(carNumberInputId) as HTMLInputElement).value =
    car["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"] || "";
  (document.getElementById(carModelInputId) as HTMLInputElement).value =
    car["–ê–≤—Ç–æ"] || "";
  (document.getElementById(carYearInputId) as HTMLInputElement).value =
    car["–†—ñ–∫"] || "";
  (document.getElementById(carCodeInputId) as HTMLInputElement).value =
    car["–ö–æ–¥–î–í–ó"] || car["–ö–æ–¥ –î–í–ó"] || "";
}

async function fetchClientData(clientId: string) {
  const { data: clientData } = await supabase
    .from("clients")
    .select("data")
    .eq("client_id", clientId)
    .single();
  return clientData?.data || null;
}

async function fillClientInfo(clientId: string) {
  const clientData = await fetchClientData(clientId);
  if (clientData) {
    (document.getElementById(clientInputId) as HTMLInputElement).value =
      clientData["–ü–Ü–ë"] || "";

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ
    const phoneInput = document.getElementById(
      phoneInputId
    ) as HTMLInputElement;
    const phoneData = clientData["–¢–µ–ª–µ—Ñ–æ–Ω"] || "";
    if (phoneData) {
      phoneInput.value = formatPhoneNumber(phoneData);
    }

    (document.getElementById(extraInputId) as HTMLInputElement).value =
      clientData["–î–æ–¥–∞—Ç–∫–æ–≤—ñ"] || "";
    (document.getElementById(carIncomeInputId) as HTMLInputElement).value =
      clientData["–î–∂–µ—Ä–µ–ª–æ"] || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ";
    return clientData;
  }
  return null;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏
async function loadUniqueData() {
  const { data: allCars } = await supabase.from("cars").select("data");
  const { data: allClients } = await supabase.from("clients").select("data");

  if (allCars) {
    const carModels = [
      ...new Set(
        allCars
          .map((car) => car.data?.["–ê–≤—Ç–æ"])
          .filter((model) => model && typeof model === "string" && model.trim())
          .map((model) => model.toString().trim())
      ),
    ].sort();

    const carCodes = [
      ...new Set(
        allCars
          .map((car) => car.data?.["–ö–æ–¥–î–í–ó"])
          .filter((code) => code && typeof code === "string" && code.trim())
          .map((code) => code.toString().trim())
      ),
    ].sort();

    const carNumbers = [
      ...new Set(
        allCars
          .map((car) => car.data?.["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"])
          .filter((num) => num && typeof num === "string" && num.trim())
          .map((num) => num.toString().trim())
      ),
    ].sort();

    const engines = [
      ...new Set(
        allCars
          .map((car) => car.data?.["–û–± º—î–º"])
          .filter((eng) => eng && typeof eng === "string" && eng.trim())
          .map((eng) => eng.toString().trim())
      ),
    ].sort();

    const vins = [
      ...new Set(
        allCars
          .map((car) => car.data?.["Vincode"])
          .filter((vin) => vin && typeof vin === "string" && vin.trim())
          .map((vin) => vin.toString().trim())
      ),
    ].sort();

    allUniqueData.carModels = carModels;
    allUniqueData.carCodes = carCodes;
    allUniqueData.carNumbers = carNumbers;
    allUniqueData.engines = engines;
    allUniqueData.vins = vins;
  }

  if (allClients) {
    const phones = [
      ...new Set(
        allClients
          .map((client) => client.data?.["–¢–µ–ª–µ—Ñ–æ–Ω"])
          .filter(
            (phone): phone is string => typeof phone === "string" && !!phone
          )
          .flatMap((phone: string) =>
            phone
              .split(/[,;]/)
              .map((p: string) => p.trim())
              .filter((p: string) => p.length > 0)
          )
          .map((phone) => formatPhoneNumber(phone)) // –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –≤ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—ñ
      ),
    ].sort();

    allUniqueData.phones = phones;
  }
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é setupEditingAutocompletes
function setupEditingAutocompletes() {
  const carModelInput = document.getElementById(
    carModelInputId
  ) as HTMLInputElement;
  const carModelList = document.getElementById(
    carModelListId
  ) as HTMLUListElement;
  const carCodeInput = document.getElementById(
    carCodeInputId
  ) as HTMLInputElement;
  const carCodeList = document.getElementById(
    carCodeListId
  ) as HTMLUListElement;
  const phoneInput = document.getElementById(phoneInputId) as HTMLInputElement;
  const phoneList = document.getElementById(phoneListId) as HTMLUListElement;
  const carNumberInput = document.getElementById(
    carNumberInputId
  ) as HTMLInputElement;
  const carNumberList = document.getElementById(
    carNumberListId
  ) as HTMLUListElement;
  const carEngineInput = document.getElementById(
    carEngineInputId
  ) as HTMLInputElement;
  const carEngineList = document.getElementById(
    carEngineListId
  ) as HTMLUListElement;
  const carVinInput = document.getElementById(
    carVinInputId
  ) as HTMLInputElement;
  const carVinList = document.getElementById(carVinListId) as HTMLUListElement;

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤
  setupSimpleAutocomplete(
    carModelInput,
    carModelList,
    allUniqueData.carModels,
    undefined,
    "carModelEdit"
  );
  setupSimpleAutocomplete(
    carCodeInput,
    carCodeList,
    allUniqueData.carCodes,
    undefined,
    "carCodeEdit"
  );
  setupSimpleAutocomplete(
    phoneInput,
    phoneList,
    allUniqueData.phones,
    undefined,
    "phoneEdit"
  );
  setupSimpleAutocomplete(
    carNumberInput,
    carNumberList,
    allUniqueData.carNumbers,
    undefined,
    "carNumberEdit"
  );
  setupSimpleAutocomplete(
    carEngineInput,
    carEngineList,
    allUniqueData.engines,
    undefined,
    "carEngineEdit"
  );
  setupSimpleAutocomplete(
    carVinInput,
    carVinList,
    allUniqueData.vins,
    undefined,
    "carVinEdit"
  );

  document.getElementById("car-confirm-icons")!.style.display = "flex";
}

async function showModalCreateSakazNarad() {
  // –î–æ–¥–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ —â–µ –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ
  if (!document.getElementById(savePromptModalId)) {
    document.body.appendChild(createSavePromptModal());
  }

  if (document.getElementById(modalOverlayId)) return;

  const modal = createModalElement();
  document.body.appendChild(modal);

  // üî∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è confirm-toggle - –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  userConfirmation = "yes";
  const confirmToggle = document.getElementById(
    "confirm-toggle"
  ) as HTMLButtonElement;

  // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–∫–æ–Ω–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  document.getElementById("car-confirm-icons")!.style.display = "none";

  // –ü–æ—á–∞—Ç–∫–æ–≤–æ userConfirmation = null
  userConfirmation = null;

  if (confirmToggle) {
    const states = [
      { value: null, icon: "üîÅ", class: "", title: "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" },
      { value: "yes", icon: "‚ûï", class: "yes", title: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" },
      { value: "no", icon: "‚ùå", class: "no", title: "–í—ñ–¥—Ö–∏–ª–∏—Ç–∏" },
    ];

    let currentStateIndex = 0;

    const applyState = (index: number) => {
      const state = states[index];
      userConfirmation = state.value as any;
      confirmToggle.textContent = state.icon;
      confirmToggle.className = `confirm-button ${state.class}`;
      confirmToggle.title = state.title;

      // üí• –Ø–∫—â–æ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ üîÅ ‚Äî —Å–∫–∏–¥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –∞–≤—Ç–æ
      if (userConfirmation === null) {
        selectedClientId = null;
        selectedCarId = null;
      }
    };

    applyState(currentStateIndex);

    confirmToggle.addEventListener("click", () => {
      currentStateIndex = (currentStateIndex + 1) % states.length;
      applyState(currentStateIndex);
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
  await loadUniqueData();

  // –ö–µ—à—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const btnSave = document.getElementById(btnSaveId)!;
  const modalElement = document.getElementById(modalOverlayId)!;
  const closeBtn = document.getElementById(modalCloseBtnId)!;
  const btnEdit = document.getElementById(btnEditId)!;
  const clientInput = document.getElementById(
    clientInputId
  ) as HTMLInputElement;
  const clientList = document.getElementById(clientListId) as HTMLUListElement;
  const carNumberInput = document.getElementById(
    carNumberInputId
  ) as HTMLInputElement;
  const carNumberList = document.getElementById(
    carNumberListId
  ) as HTMLUListElement;
  const carModelInput = document.getElementById(
    carModelInputId
  ) as HTMLInputElement;
  const carModelList = document.getElementById(
    carModelListId
  ) as HTMLUListElement;
  const carIncomeInput = document.getElementById(
    carIncomeInputId
  ) as HTMLInputElement;
  const phoneInput = document.getElementById(phoneInputId) as HTMLInputElement;
  const phoneList = document.getElementById(phoneListId) as HTMLUListElement;
  const extraInput = document.getElementById(extraInputId) as HTMLInputElement;

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
  setupPhoneFormatting(phoneInput);

  const editableFieldsInitially = [
    clientInput,
    carModelInput,
    carNumberInput,
    phoneInput,
  ];

  // –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è
  editableFieldsInitially.forEach((el) => el.removeAttribute("readonly"));

  btnEdit.addEventListener("click", async () => {
    const isUnlocked = btnEdit.dataset.unlocked === "true";
    btnEdit.dataset.unlocked = (!isUnlocked).toString();
    btnEdit.textContent = isUnlocked ? "üîí" : "üîì";
    btnEdit.title = isUnlocked ? "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–æ–ª—è?" : "–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–æ–ª—è?";

    // –ó–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É –∫–Ω–æ–ø–∫–∏
    if (!isUnlocked) {
      btnEdit.style.backgroundColor = "red";
      btnEdit.style.color = "white";
    } else {
      btnEdit.style.backgroundColor = "";
      btnEdit.style.color = "";
    }

    const fuelContainer =
      document.getElementById(carFuelInputId)?.parentElement;
    const fuelInput = document.getElementById(carFuelInputId);
    const incomeContainer =
      document.getElementById(carIncomeInputId)?.parentElement;
    const incomeInput = document.getElementById(carIncomeInputId);

    if (!fuelContainer || !fuelInput || !incomeContainer || !incomeInput)
      return;

    if (!isUnlocked) {
      // üîì –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –£–í–Ü–ú–ö–ù–ï–ù–û

      // –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–æ–ª—è
      document.getElementById(carEngineInputId)?.removeAttribute("readonly");
      document.getElementById(carVinInputId)?.removeAttribute("readonly");
      document.getElementById(extraInputId)?.removeAttribute("readonly");
      document.getElementById(carYearInputId)?.removeAttribute("readonly");
      document.getElementById(carCodeInputId)?.removeAttribute("readonly");

      // –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
      setupEditingAutocompletes();

      // üîÅ –ü–ê–õ–¨–ù–ï ‚Üí SELECT
      if (!(fuelInput instanceof HTMLSelectElement)) {
        const currentFuel = (fuelInput as HTMLInputElement).value;
        const fuelOptions = ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑", "–ì—ñ–±—Ä–∏–¥", "–ï–ª–µ–∫—Ç—Ä–æ"];
        const fuelSelect = document.createElement("select");
        const defaultOption = document.createElement("option");
        defaultOption.value = "–ù–µ–≤–∫–∞–∑–∞–Ω–æ";
        defaultOption.textContent = "–ù–µ–≤–∫–∞–∑–∞–Ω–æ";
        fuelSelect.id = carFuelInputId;
        fuelSelect.className = "input-create-sakaz_narad";

        fuelOptions.forEach((fuel) => {
          const option = document.createElement("option");
          option.value = fuel;
          option.textContent = fuel;
          fuelSelect.appendChild(option);
        });

        fuelSelect.value = currentFuel;
        fuelContainer.replaceChild(fuelSelect, fuelInput);
      }

      // üîÅ –î–ñ–ï–†–ï–õ–û ‚Üí SELECT
      if (!(incomeInput instanceof HTMLSelectElement)) {
        try {
          const { data: incomeRows, error } = await supabase
            .from("incomes")
            .select("data");

          if (error) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ income:", error.message);
            return;
          }

          const sources = [
            ...new Set(
              incomeRows
                .map((row: any) => row?.data?.Name)
                .filter(
                  (name: any) => typeof name === "string" && name.trim() !== ""
                )
            ),
          ];

          //console.log("üîÑ –î–∂–µ—Ä–µ–ª–∞ –∑ Supabase:", sources);

          const incomeSelect = document.createElement("select");
          incomeSelect.id = carIncomeInputId;
          incomeSelect.className = "input-create-sakaz_narad";

          // –î–æ–¥–∞–π –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
          const defaultOption = document.createElement("option");
          defaultOption.value = "–ù–µ–≤–∫–∞–∑–∞–Ω–æ";
          defaultOption.textContent = "–ù–µ–≤–∫–∞–∑–∞–Ω–æ";
          incomeSelect.appendChild(defaultOption);

          sources.forEach((src) => {
            const option = document.createElement("option");
            option.value = src;
            option.textContent = src;
            incomeSelect.appendChild(option);
          });

          // –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ input ‚Üí –≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ —É select
          const currentValue = (incomeInput as HTMLInputElement).value.trim();
          if (sources.includes(currentValue)) {
            incomeSelect.value = currentValue;
          }

          incomeContainer.replaceChild(incomeSelect, incomeInput);
        } catch (e) {
          console.error("üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª:", e);
        }
      }
    } else {
      // üîí –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –í–ò–ú–ö–ù–ï–ù–û

      // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–∫–æ–Ω–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç–æ–º—É –∑–∞–º–∫—É
      const confirmIcons = document.getElementById("car-confirm-icons");
      if (confirmIcons) confirmIcons.style.display = "none";

      // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ readonly –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
      document
        .getElementById(carEngineInputId)
        ?.setAttribute("readonly", "true");
      document.getElementById(carVinInputId)?.setAttribute("readonly", "true");
      document.getElementById(extraInputId)?.setAttribute("readonly", "true");
      document.getElementById(carYearInputId)?.setAttribute("readonly", "true");
      document.getElementById(carCodeInputId)?.setAttribute("readonly", "true");

      // –û—á–∏—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      const editKeys = [
        "carModelEdit",
        "phoneEdit",
        "carNumberEdit",
        "carEngineEdit",
        "carVinEdit",
        "carCodeEdit", // –î–æ–¥–∞–Ω–æ
      ];
      editKeys.forEach((key) => {
        if (currentAutocompletes[key]) {
          const data = currentAutocompletes[key];
          let inputEl: HTMLInputElement | null = null;

          if (key.includes("carModel")) {
            inputEl = carModelInput;
          } else if (key.includes("phone")) {
            inputEl = phoneInput;
          } else if (key.includes("carNumber")) {
            inputEl = carNumberInput;
          } else if (key.includes("carEngine")) {
            inputEl = document.getElementById(
              carEngineInputId
            ) as HTMLInputElement;
          } else if (key.includes("carVin")) {
            inputEl = document.getElementById(
              carVinInputId
            ) as HTMLInputElement;
          } else if (key.includes("carCode")) {
            // –î–æ–¥–∞–Ω–æ
            inputEl = document.getElementById(
              carCodeInputId
            ) as HTMLInputElement;
          }

          if (inputEl && data) {
            inputEl.removeEventListener("input", data.inputHandler);
            inputEl.removeEventListener("focus", data.focusHandler);
            inputEl.removeEventListener("blur", data.blurHandler);
          }
        }
      });
      currentAutocompletes = {}; // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏

      // üîÅ –ü–ê–õ–¨–ù–ï ‚Üí INPUT
      if (fuelInput instanceof HTMLSelectElement) {
        const selectedValue = fuelInput.value;
        const newInput = document.createElement("input");
        newInput.id = carFuelInputId;
        newInput.className = "input-create-sakaz_narad";
        newInput.type = "text";
        newInput.readOnly = true;
        newInput.value = selectedValue;
        fuelContainer.replaceChild(newInput, fuelInput);
      }

      // üîÅ –î–ñ–ï–†–ï–õ–û ‚Üí INPUT
      if (incomeInput instanceof HTMLSelectElement) {
        const selectedValue = incomeInput.value;
        const newInput = document.createElement("input");
        newInput.id = carIncomeInputId;
        newInput.className = "input-create-sakaz_narad";
        newInput.type = "text";
        newInput.readOnly = true;
        newInput.value = selectedValue;
        incomeContainer.replaceChild(newInput, incomeInput);
      }
      selectedClientId = null;
      selectedCarId = null;
      userConfirmation = null;
      // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–≤–∏—á–∞–π–Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
      setupNormalAutocompletes();
    }
  });

  closeBtn.addEventListener("click", () => modalElement.remove());

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
  const { data: allClients } = await supabase
    .from("clients")
    .select("client_id, data");

  const clientOptions =
    allClients
      ?.map((c) => ({
        id: c.client_id,
        fullName: c.data?.["–ü–Ü–ë"] || "",
        phone: c.data?.["–¢–µ–ª–µ—Ñ–æ–Ω"] || "",
        data: c.data || {},
      }))
      .filter((c) => c.fullName)
      .sort((a, b) => a.fullName.localeCompare(b.fullName)) || [];

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ
  const { data: allCars } = await supabase
    .from("cars")
    .select("cars_id, client_id, data");

  const allCarItems =
    allCars
      ?.map((c) => ({
        ...(c.data || {}),
        id: c.cars_id,
        client_id: c.client_id,
      }))
      .filter((c) => c["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"] || c["–ê–≤—Ç–æ"])
      .sort((a, b) =>
        (a["–ê–≤—Ç–æ"] || "").toString().localeCompare((b["–ê–≤—Ç–æ"] || "").toString())
      ) || [];

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
  const getCarsForClient = (clientId: string) => {
    return allCarItems.filter((cars) => cars.client_id === clientId);
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —è–∫ –æ–∫—Ä–µ–º—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
  const getPhonesForClient = (clientId: string) => {
    const client = clientOptions.find((c) => c.id === clientId);
    if (!client || !client.data || !client.data["–¢–µ–ª–µ—Ñ–æ–Ω"]) return [];

    const phoneData = client.data["–¢–µ–ª–µ—Ñ–æ–Ω"];
    if (typeof phoneData !== "string") return [];

    // –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∑–∞ –∫–æ–º–æ—é/–∫—Ä–∞–ø–∫–æ—é –∑ –∫–æ–º–æ—é —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ
    const phones = phoneData
      .split(/[,;]/)
      .map((phone) => phone.trim())
      .filter((phone) => phone);
    return phones.map((phone) => ({
      ...client,
      phone: phone,
      displayPhone: phone,
    }));
  };

  // **********************************************
  // –ó–ú–Ü–ù–ò –¢–£–¢: –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
  // **********************************************
  function validateRequiredFields(): boolean {
    const clientName = clientInput.value.trim();
    const carModel = carModelInput.value.trim();

    if (clientName === "" || carModel === "") {
      const missing = [];
      if (clientName === "") missing.push("–ü–Ü–ë");
      if (carModel === "") missing.push("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å");

      showLockToggleMessage(
        false,
        `‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ–ª–µ: ${missing.join(" —Ç–∞ ")}`
      );
      return false;
    }

    return true;
  }

  // **********************************************
  // –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù –í –§–£–ù–ö–¶–Ü–á –í–ê–õ–Ü–î–ê–¶–Ü–á
  // **********************************************

  //–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞ —Ç–∞–∫ –∞–±–æ –Ω—ñ –ø—Ä–∏ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
  btnSave.addEventListener("click", async () => {
    const isEditUnlocked = btnEdit.dataset.unlocked === "true";

    if (!isEditUnlocked) {
      showLockToggleMessage(
        false,
        "üîì –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–±–ª–æ–∫—É–π—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
      );
      return;
    }

    // **********************************************
    // –ó–ú–Ü–ù–ò –¢–£–¢: –î–æ–¥–∞—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ showSavePromptModal
    // **********************************************
    if (!validateRequiredFields()) {
      return; // –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞
    }
    // **********************************************
    // –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù
    // **********************************************

    const confirmed = await showSavePromptModal();
    if (!confirmed) return; // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ù—ñ" ‚Äî –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
    await saveClientAndCarToDatabase();
    await loadActsTable();
    document.getElementById(modalOverlayId)?.remove();
    resetFormState();

    console.log("üìã –î–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏:", getModalFormValues());
    await saveClientAndCarToDatabase(); // ‚¨ÖÔ∏è –∑–±–µ—Ä–µ–≥—Ç–∏
    await loadActsTable(); // –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
    await saveClientAndCarToDatabase(); // ‚¨ÖÔ∏è –∑–±–µ—Ä–µ–≥—Ç–∏
    await loadActsTable(); // –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
    document.getElementById(modalOverlayId)?.remove();

    resetFormState();
  });

  // üìù –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–≤–æ—Ä–∏—Ç–∏"
  const btnCreate = document.getElementById(btnCreateId);
  if (btnCreate) {
    btnCreate.addEventListener("click", async () => {
      const module = await import("./pidtverdutu_sberihannya_zakaz_naryad");
      const { saveModalIdCreate, createSaveModalCreate, showSaveModalCreate } =
        module;

      if (!document.getElementById(saveModalIdCreate)) {
        document.body.appendChild(createSaveModalCreate());
      }

      const confirmedCreate = await showSaveModalCreate();
      if (!confirmedCreate) {
      }
    });
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
  const setupCarAutocompletes = (carItems: any[], selectedCar?: any) => {
    // –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä–∏ –∞–≤—Ç–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ
    const carNumberItems = selectedCar ? [selectedCar] : carItems;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ
    setupAutocomplete(
      carNumberInput,
      carNumberList,
      carNumberItems,
      (c) => c["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"] || "",
      handleCarSelection,
      true,
      "carNumber"
    );

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ - –≤—Å—ñ –∞–≤—Ç–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
    setupAutocomplete(
      carModelInput,
      carModelList,
      carItems,
      (c) => (c["–ê–≤—Ç–æ"] || "").toString().trim(),
      (selectedCarFromModel) => {
        handleCarSelection(selectedCarFromModel);
        // –û–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–æ–º–µ—Ä —Ü—å–æ–≥–æ –∞–≤—Ç–æ
        setupAutocomplete(
          carNumberInput,
          carNumberList,
          [selectedCarFromModel],
          (c) => c["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"] || "",
          handleCarSelection,
          true,
          "carNumber"
        );
      },
      true,
      "carModel"
    );
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
  const setupPhoneAutocomplete = (phoneItems: any[]) => {
    setupAutocomplete(
      phoneInput,
      phoneList,
      phoneItems,
      (c) => c.displayPhone || c.phone || "",
      async (selectedClient) => {
        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        await fillClientInfo(selectedClient.id);

        // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ selectedClientId
        selectedClientId = selectedClient.id;

        // –û–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        const clientCars = getCarsForClient(selectedClient.id);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø–µ—Ä—à–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        let selectedCar = null;
        if (clientCars.length > 0) {
          selectedCar = clientCars[0];
          fillCarFields(selectedCar);

          // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID –∞–≤—Ç–æ
          selectedCarId = selectedCar.id;
        }

        setupCarAutocompletes(clientCars, selectedCar);
      },
      true,
      "phone"
    );
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
  const handleCarSelection = async (car: any) => {
    fillCarFields(car);
    const ownerData = await fetchClientData(car.client_id);
    if (ownerData) {
      clientInput.value = ownerData["–ü–Ü–ë"] || "";
      phoneInput.value = ownerData["–¢–µ–ª–µ—Ñ–æ–Ω"] || "";
      extraInput.value = ownerData["–î–æ–¥–∞—Ç–∫–æ–≤—ñ"] || "";
      carIncomeInput.value = ownerData["–î–∂–µ—Ä–µ–ª–æ"] || "";

      //–í–∏–≤–µ—Å—Ç–∏ client_id —Ç–∞  car.id
      if (isLocked()) {
        if (car.id) selectedCarId = car.id;
        if (car.client_id) selectedClientId = car.client_id;
      } else {
        console.log("üîì –ó–∞–º–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π ‚Äî ID –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
      }

      // –û–Ω–æ–≤–∏—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
      const clientCars = getCarsForClient(car.client_id);
      const clientPhones = getPhonesForClient(car.client_id);

      // –ü–µ—Ä–µ–¥–∞—Ç–∏ –æ–±—Ä–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, —â–æ–± –æ–±–º–µ–∂–∏—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ —Ü–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∞–≤—Ç–æ
      setupCarAutocompletes(clientCars, car);
      setupPhoneAutocomplete(clientPhones);
    }
  };

  selectedClientId = null;
  selectedCarId = null;
  userConfirmation = null;

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω—å
  const setupNormalAutocompletes = () => {
    // 1. –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ –≤–ª–∞—Å–Ω–∏–∫–∞ –∑–∞ —ñ–º–µ–Ω–µ–º (–ü–Ü–ë)
    setupAutocomplete(
      clientInput,
      clientList,
      clientOptions,
      (c) => c.fullName || "",
      async (selectedClient) => {
        clearCarAndContactFields(); // üßº –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ
        const isEditUnlocked = btnEdit.dataset.unlocked === "true";

        if (isEditUnlocked) {
          // ‚ùå –Ø–∫—â–æ –∑–∞–º–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ü–Ü–ë, –∞–ª–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å—É—î–º–æ –≤ client_id
          clientInput.value = selectedClient.fullName;
          console.log("üîì –í—ñ–¥–∫—Ä–∏—Ç–æ: –¥–∞–Ω—ñ –Ω–µ –ø—ñ–¥—Ç—è–≥—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ");
          return;
        }

        // üîí –Ø–∫—â–æ –∑–∞–º–æ–∫ –∑–∞–∫—Ä–∏—Ç–∏–π ‚Äî –≤–∏–∫–æ–Ω—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
        await fillClientInfo(selectedClient.id);
        selectedClientId = selectedClient.id;

        const clientCars = getCarsForClient(selectedClient.id);
        let selectedCar = null;
        if (clientCars.length > 0) {
          selectedCar = clientCars[0];
          fillCarFields(selectedCar);

          if (selectedCar?.id && selectedCar?.client_id) {
            selectedCarId = selectedCar.id;
            selectedClientId = selectedCar.client_id;
          }
        }

        const clientPhones = getPhonesForClient(selectedClient.id);
        setupCarAutocompletes(clientCars, selectedCar);
        setupPhoneAutocomplete(clientPhones);
      },
      true,
      "client"
    );

    // –ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ
    setupCarAutocompletes(allCarItems);
    setupPhoneAutocomplete(clientOptions);
  };

  // –ü–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω—å
  setupNormalAutocompletes();
}

function clearCarAndContactFields() {
  const idsToClear = [
    phoneInputId,
    carNumberInputId,
    carModelInputId,
    carEngineInputId,
    carFuelInputId,
    carVinInputId,
    carIncomeInputId,
    extraInputId,
    carYearInputId,
    carCodeInputId,
  ];

  idsToClear.forEach((id) => {
    const input = document.getElementById(id) as
      | HTMLInputElement
      | HTMLSelectElement
      | null;
    if (input instanceof HTMLInputElement) {
      input.value = "";
    } else if (input instanceof HTMLSelectElement) {
      input.selectedIndex = 0;
    }
  });

  selectedCarId = null;
}

// –í–∏–∫–ª–∏–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
document.addEventListener("DOMContentLoaded", () => {
  document
    .querySelector('[data-action="openHome"]')
    ?.addEventListener("click", (e) => {
      e.preventDefault();
      showModalCreateSakazNarad();
    });
});

// ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
export function showLockToggleMessage(
  isUnlocked: boolean,
  customText?: string
) {
  const note = document.createElement("div");
  note.textContent =
    customText ||
    (isUnlocked
      ? "üîì –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
      : "üîí –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è");

  note.style.position = "fixed";
  note.style.left = "50%";
  note.style.bottom = "50%";
  note.style.transform = "translateX(-50%)";
  note.style.backgroundColor = isUnlocked ? "#4caf50" : "#f44336";
  note.style.color = "white";
  note.style.padding = "12px 24px";
  note.style.borderRadius = "8px";
  note.style.zIndex = "10001";
  note.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
  note.style.fontSize = "16px";
  document.body.appendChild(note);

  setTimeout(() => {
    note.remove();
  }, 1500);
}

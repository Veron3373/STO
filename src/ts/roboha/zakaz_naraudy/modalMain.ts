// src\ts\roboha\zakaz_naraudy\modalMain.ts
import { supabase } from "../../vxid/supabaseClient";
import { showNotification } from "./inhi/vspluvauhe_povidomlenna";
import {
  refreshPhotoData,
  safeParseJSON,
} from "./inhi/ctvorennia_papku_googleDrive.";
import { initPhoneClickHandler } from "./inhi/telefonna_pidskazka";
import { initOdometerInput } from "./inhi/odometr";
import {
  setupAutocompleteForEditableCells,
  refreshQtyWarningsIn,
   initializeActWarnings, 
} from "./inhi/kastomna_tabluca";
import {
  createViknoPidtverdchennayZakruttiaAkty,
  viknoPidtverdchennayZakruttiaAktyId,
} from "./inhi/vikno_pidtverdchennay_zakruttia_akty";
import {
  createViknoVvodyParolu,
  viknoVvodyParoluId,
} from "./inhi/vikno_vvody_parolu";
import { printModalToPdf } from "./inhi/ctvorenyaPDF";
import {
  globalCache,
  loadGlobalData,
  ZAKAZ_NARAYD_MODAL_ID,
  ZAKAZ_NARAYD_BODY_ID,
  EDITABLE_PROBIG_ID,
  EDITABLE_REASON_ID,
  ACT_ITEMS_TABLE_CONTAINER_ID,
  formatNumberWithSpaces,
  EDITABLE_RECOMMENDATIONS_ID,
} from "./globalCache";
import {
  createModal,
  calculateRowSum,
  addNewRow,
  generateTableHTML,
  createTableRow,
  updateCalculatedSumsInFooter,
} from "./modalUI";
import { showModalAllOtherBases } from "../dodatu_inchi_bazu/dodatu_inchi_bazu_danux";
import { formatDate } from "./inhi/formatuvannya_datu";
import { addSaveHandler } from "./inhi/zberechennya_zmin_y_danux_aktu";
import { userAccessLevel } from "../tablucya/users"; // –Ü–º–ø–æ—Ä—Ç —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞


import { canUserOpenActs } from "../tablucya/users";

/**
 * –û–ù–û–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è showModal –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø—É
 */
export async function showModal(actId: number): Promise<void> {
  // –ù–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –ß–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –∞–∫—Ç–∏?
  const canOpen = await canUserOpenActs();
  
  if (!canOpen) {
    console.warn(`‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–∫—Ç—É ${actId}`);
    showNoAccessNotification();
    return;
  }

  // –†–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
  createModal();
  const modal = document.getElementById(ZAKAZ_NARAYD_MODAL_ID);
  const body = document.getElementById(ZAKAZ_NARAYD_BODY_ID);
  if (!modal || !body) {
    console.error("‚ùå –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∞–±–æ –π–æ–≥–æ —Ç—ñ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
    return;
  }
  modal.setAttribute("data-act-id", actId.toString());
  showNotification("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫—Ç—É...", "info", 2000);
  modal.classList.remove("hidden");
  body.innerHTML = "";
  try {
    await loadGlobalData();
    await createRequiredModals();
    const { data: act, error: actError } = await supabase
      .from("acts")
      .select("*")
      .eq("act_id", actId)
      .single();
    if (actError || !act) {
      handleLoadError(actError);
      return;
    }
    globalCache.currentActId = actId;
    globalCache.isActClosed = !!act.date_off;
    const [clientData, carData] = await Promise.all([
      fetchClientData(act.client_id),
      fetchCarData(act.cars_id),
    ]);
    const actDetails = safeParseJSON(act.info || act.data || act.details) || {};
    globalCache.oldNumbers = new Map<number, number>();
    for (const d of actDetails?.["–î–µ—Ç–∞–ª—ñ"] || []) {
      const id = Number(d?.sclad_id);
      const qty = Number(d?.["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] ?? 0);
      if (id) globalCache.oldNumbers.set(id, qty);
    }
    renderModalContent(act, actDetails, clientData, carData);
    await addModalHandlers(actId, actDetails, clientData?.phone);
    await refreshQtyWarningsIn(ACT_ITEMS_TABLE_CONTAINER_ID);
    await refreshPhotoData(actId);

    applyAccessRestrictions();

    showNotification("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", "success", 1500);
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–∫—Ç—É:", error);
    showNotification(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—É`, "error");
    if (body) {
      body.innerHTML = `<p class="error-message">‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—É. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.</p>`;
    }
  }
}

/**
 * –ù–û–í–ê —Ñ—É–Ω–∫—Ü—ñ—è: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–∫—Ç—É
 */
function showNoAccessNotification(): void {
  const notification = document.createElement("div");
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #ff5722;
    color: white;
    padding: 15px 25px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    z-index: 10001;
    font-size: 16px;
    animation: slideInOut 3s ease;
  `;
  notification.innerHTML = `
    <div style="display: flex; align-items: center; gap: 10px;">
      <span style="font-size: 24px;">üîí</span>
      <span>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç—ñ–≤</span>
    </div>
  `;
  
  const style = document.createElement("style");
  style.textContent = `
    @keyframes slideInOut {
      0% { transform: translateX(100%); opacity: 0; }
      10% { transform: translateX(0); opacity: 1; }
      90% { transform: translateX(0); opacity: 1; }
      100% { transform: translateX(100%); opacity: 0; }
    }
  `;
  
  if (!document.getElementById("no-access-notification-style")) {
    style.id = "no-access-notification-style";
    document.head.appendChild(style);
  }
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

/**
 * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
 */
function applyAccessRestrictionsToNewRow(): void {
  const table = document.querySelector(
    `#${ACT_ITEMS_TABLE_CONTAINER_ID} table`
  );
  if (!table) return;

  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ —Ü—ñ–Ω–∏ —Ç–∞ —Å—É–º–∏ –≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –¥–æ–¥–∞–Ω–æ–º—É —Ä—è–¥–∫—É
  const lastRow = table.querySelector("tbody tr:last-child");
  if (lastRow) {
    const cells = lastRow.querySelectorAll("td");
    cells.forEach((cell) => {
      const dataName = cell.getAttribute("data-name");
      if (dataName === "price" || dataName === "sum") {
        cell.classList.add("hidden");
      }
    });
  }
}

/**
 * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ–±–º–µ–∂–µ–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º
 */
function applyAccessRestrictions(): void {
  if (userAccessLevel === "–°–ª—é—Å–∞—Ä") {
    const statusLockBtn = document.getElementById("status-lock-btn");
    const printActButton = document.getElementById("print-act-button");
    const skladButton = document.getElementById("sklad");

    if (statusLockBtn) statusLockBtn.classList.add("hidden");
    if (printActButton) printActButton.classList.add("hidden");
    if (skladButton) skladButton.classList.add("hidden");
    restrictPhotoAccess();
  }
}

/**
 * –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ñ–æ—Ç–æ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
function restrictPhotoAccess(): void {
  const photoCell = document.querySelector(
    "table.zakaz_narayd-table.left tr:nth-child(5) td:nth-child(2)"
  ) as HTMLTableCellElement | null;

  if (!photoCell) return;

  // –í–∏–¥–∞–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  const existingHandler = (photoCell as any).__gd_click__;
  if (existingHandler) {
    photoCell.removeEventListener("click", existingHandler);
  }

  // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏
  const restrictedClickHandler = async (e: MouseEvent) => {
    e.preventDefault();

    const modal = document.getElementById("zakaz_narayd-custom-modal");
    const actIdStr = modal?.getAttribute("data-act-id");
    if (!actIdStr) return;
    const actId = Number(actIdStr);

    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –ë–î
      const { data: act, error } = await supabase
        .from("acts")
        .select("data, date_off")
        .eq("act_id", actId)
        .single();

      if (error || !act) {
        showNotification("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–∫—Ç—É", "error");
        return;
      }

      const actData = safeParseJSON(act.data) || {};
      const links: string[] = Array.isArray(actData?.["–§–æ—Ç–æ"])
        ? actData["–§–æ—Ç–æ"]
        : [];
      const hasLink = links.length > 0 && links[0];

      // –Ø–∫—â–æ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ
      if (hasLink) {
        window.open(links[0], "_blank");
        return;
      }

      // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –∑–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è –æ–±–º–µ–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      showNotification(
        "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è –≤–∞—à–æ–≥–æ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É",
        "warning"
      );
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–æ—Ç–æ:", err);
      showNotification("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–æ—Ç–æ", "error");
    }
  };

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
  (photoCell as any).__gd_click__ = restrictedClickHandler;
  photoCell.addEventListener("click", restrictedClickHandler);
}

async function createRequiredModals(): Promise<void> {
  let elem = document.getElementById(viknoPidtverdchennayZakruttiaAktyId);
  if (elem) elem.remove();
  document.body.appendChild(createViknoPidtverdchennayZakruttiaAkty());

  elem = document.getElementById(viknoVvodyParoluId);
  if (elem) elem.remove();
  document.body.appendChild(createViknoVvodyParolu());
}

async function fetchClientData(clientId: number | null): Promise<any> {
  if (!clientId) return null;
  const { data: client } = await supabase
    .from("clients")
    .select("data")
    .eq("client_id", clientId)
    .single();
  return client?.data ? safeParseJSON(client.data) : null;
}

async function fetchCarData(carId: number | null): Promise<any> {
  if (!carId) return null;
  const { data: car } = await supabase
    .from("cars")
    .select("data")
    .eq("cars_id", carId)
    .single();
  return car?.data ? safeParseJSON(car.data) : null;
}

function handleLoadError(error: any): void {
  const body = document.getElementById(ZAKAZ_NARAYD_BODY_ID);
  showNotification(
    `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç—É: ${error?.message || "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è."}`,
    "error"
  );
  if (body) {
    body.innerHTML = `<p class="error-message">‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–∫—Ç. ${
      error?.message || "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è."
    }</p>`;
  }
}

function renderModalContent(
  act: any,
  actDetails: any,
  clientData: any,
  carData: any
): void {
  const body = document.getElementById(ZAKAZ_NARAYD_BODY_ID);
  if (!body) return;
  const isClosed = globalCache.isActClosed;
  const isRestricted = userAccessLevel === "–°–ª—é—Å–∞—Ä";
  const clientInfo = {
    fio: clientData?.["–ü–Ü–ë"] || clientData?.fio || "‚Äî",
    phone: clientData?.["–¢–µ–ª–µ—Ñ–æ–Ω"] || clientData?.phone || "‚Äî",
    note: clientData?.["–î–æ–¥–∞—Ç–∫–æ–≤—ñ"] || "‚Äî",
  };
  const carInfo = {
    auto: carData?.["–ê–≤—Ç–æ"] || "",
    year: carData?.["–†—ñ–∫"] || "",
    nomer: carData?.["–ù–æ–º–µ—Ä –∞–≤—Ç–æ"] || "",
    vin: carData?.["Vincode"] || "‚Äî",
    engine:
      [carData?.["–ö–æ–¥–î–í–ó"], carData?.["–û–± º—î–º"], carData?.["–ü–∞–ª—å–Ω–µ"]]
        .filter(Boolean)
        .join(" _ ") || "‚Äî",
  };
  const editableAttr = `contenteditable="${!isClosed}"`;
  const editableClass = isClosed ? "cursor-not-allowed" : "";
  const photoCellHtml = `<div id="photo-section-slot"></div>`;
  const allItems = [
    ...(actDetails?.["–î–µ—Ç–∞–ª—ñ"] || []).map((item: any) => ({
      type: "detail",
      name: item["–î–µ—Ç–∞–ª—å"],
      quantity: item["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"],
      price: item["–¶—ñ–Ω–∞"],
      sum: item["–°—É–º–∞"],
      person_or_store: item["–ú–∞–≥–∞–∑–∏–Ω"],
      catalog: item["–ö–∞—Ç–∞–ª–æ–≥"] || "",
      sclad_id: item["sclad_id"] || null,
      slyusar_id: null,
    })),
    ...(actDetails?.["–†–æ–±–æ—Ç–∏"] || []).map((item: any) => ({
      type: "work",
      name: item["–†–æ–±–æ—Ç–∞"],
      quantity: item["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"],
      price: item["–¶—ñ–Ω–∞"],
      sum: item["–°—É–º–∞"],
      person_or_store: item["–°–ª—é—Å–∞—Ä"],
      catalog: item["–ö–∞—Ç–∞–ª–æ–≥"] || "",
      sclad_id: null,
      slyusar_id: item["slyusar_id"] || null,
    })),
  ];
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É —Ä—è–¥–∫—ñ–≤ —É globalCache
  globalCache.initialActItems = allItems;
  console.log("Initial act items saved:", globalCache.initialActItems);
  body.innerHTML = `
    <div class="zakaz_narayd-header">
      <div class="zakaz_narayd-header-info">
        <h1>B.S.Motorservice</h1>
        <p>–ê–¥—Ä–µ—Å: –≤—É–ª. –ö–æ—Ä–æ–ª—å–æ–≤–∞, 6, –í—ñ–Ω–Ω–∏—Ü—è</p>
        <p>068 931 24 38 —Ç–µ–ª</p>
      </div>
    </div>
    <div class="zakaz_narayd-table-container">
      <table class="zakaz_narayd-table left">
        ${createTableRow("–ê–∫—Ç ‚Ññ", `<span id="act-number">${act.act_id}</span>`)}
        ${createTableRow("–ö–ª—ñ—î–Ω—Ç", clientInfo.fio)}
        ${createTableRow(
          "–¢–µ–ª–µ—Ñ–æ–Ω",
          `<span style="color: blue;">${clientInfo.phone}</span>`
        )}
        ${createTableRow("–ü—Ä–∏–º—ñ—Ç–∫–∞:", clientInfo.note)}
        ${createTableRow("–§–æ—Ç–æ", photoCellHtml)}
      </table>
      <table class="zakaz_narayd-table right">
        ${createTableRow(
          isClosed ? "–ó–∞–∫—Ä–∏—Ç–∏–π" : "–í—ñ–¥–∫—Ä–∏—Ç–∏–π",
          `
          <div class="status-row">
            <div class="status-dates">
              ${
                isClosed
                  ? `<span class="red">${formatDate(
                      act.date_off
                    )}</span> | <span class="green">${formatDate(
                      act.date_on
                    )}</span>`
                  : `<span class="green">${
                      formatDate(act.date_on) || "-"
                    }</span>`
              }
            </div>
            ${
              isRestricted
                ? ""
                : `<button class="status-lock-icon" id="status-lock-btn" data-act-id="${
                    act.act_id
                  }">
                   ${isClosed ? "üîí" : "üóùÔ∏è"}
                   </button>`
            }
          </div>
        `
        )}
        ${createTableRow(
          "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å",
          `${(carInfo.auto || "").trim()} ${(carInfo.year || "").trim()} ${(
            carInfo.nomer || ""
          ).trim()}`.trim() || "‚Äî"
        )}
        ${createTableRow("Vincode", carInfo.vin)}
        ${createTableRow("–î–≤–∏–≥—É–Ω", carInfo.engine)}
        ${createTableRow(
          "–ü—Ä–æ–±—ñ–≥",
          `<span id="${EDITABLE_PROBIG_ID}" ${editableAttr} class="editable ${editableClass}">${formatNumberWithSpaces(
            actDetails?.["–ü—Ä–æ–±—ñ–≥"],
            0,
            0
          )}</span>`
        )}
      </table>
    </div>
    <div class="reason-container">
      <div class="zakaz_narayd-reason-line">
        <div class="reason-text">
          <strong>–ü—Ä–∏—á–∏–Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:</strong>
          <span id="${EDITABLE_REASON_ID}" class="highlight editable ${editableClass}" ${editableAttr}>${
    actDetails?.["–ü—Ä–∏—á–∏–Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"] || "‚Äî"
  }</span>
        </div>
        ${
          isRestricted
            ? ""
            : `<button id="print-act-button" title="–î—Ä—É–∫ –∞–∫—Ç—É" class="print-button">üñ®Ô∏è</button>`
        }
      </div>
      <div class="zakaz_narayd-reason-line">
        <div class="recommendations-text">
          <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</strong>
          <span id="${EDITABLE_RECOMMENDATIONS_ID}" class="highlight editable ${editableClass}" ${editableAttr}>${
    actDetails?.["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"] || "‚Äî"
  }</span>
        </div>
        ${
          isRestricted
            ? ""
            : `<button id="sklad" title="–°–∫–ª–∞–¥" class="sklad">üì¶</button>`
        }
      </div>
    </div>
    ${generateTableHTML(allItems, globalCache.settings.showPibMagazin)}
    ${isClosed ? createClosedActClaimText() : ""}
  `;
}

function createClosedActClaimText(): string {
  return `
    <div class="closed-act-info">
      <p><strong>–ü—Ä–µ—Ç–µ–Ω–∑—ñ–π –¥–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –∑–∞–ø—á–∞—Å—Ç–∏–Ω —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –Ω–µ –º–∞—é.</strong></p>
      <p><strong>–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω—ñ –∑–æ–±–æ–≤'—è–∑–∞–Ω–Ω—è</strong></p>
         <p>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –≥–∞—Ä–∞–Ω—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –≤—ñ–¥—Ä–µ–º–æ–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –î–¢–ó (–∞–±–æ –π–æ–≥–æ —Å–∫–ª–∞–¥–æ–≤–∏—Ö –∑–∞–ø—á–∞—Å—Ç–∏–Ω) –≤–∏–º–æ–≥–∞–º —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏–∫–∞ –∑–∞ —É–º–æ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ó–∞–º–æ–≤–Ω–∏–∫–æ–º –ø—Ä–∞–≤–∏–ª –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó –î–¢–ó. –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –µ–∫—Å–ø–ª—É–∞—Ç–∞—Ü—ñ—ó –Ω–∞ –∑–∞–ø–∞—Å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ –ó–∞–∫–æ–Ω–æ–º –£–∫—Ä–∞—ó–Ω–∏ "–ü—Ä–æ –∑–∞—Ö–∏—Å—Ç –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤". –ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω—ñ –∑–æ–±–æ–≤'—è–∑–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –Ω–µ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂—É—é—Ç—å—Å—è –Ω–∞ –∑–∞–ø–∞—Å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏, –Ω–∞–¥–∞–Ω—ñ –ó–∞–º–æ–≤–Ω–∏–∫–æ–º. –î–µ—Ç–∞–ª—ñ, —â–æ –Ω–µ –±—É–ª–∏ –∑–∞—Ç—Ä–µ–±—É–≤–∞–Ω—ñ –ó–∞–º–æ–≤–Ω–∏–∫–æ–º –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∏–¥–∞—á—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è, —É—Ç–∏–ª—ñ–∑—É—é—Ç—å—Å—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—é –Ω–µ –ø—ñ–¥–ª—è–≥–∞—é—Ç—å. –¶–∏–º –ø—ñ–¥–ø–∏—Å–æ–º —è –Ω–∞–¥–∞—é –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—É –∑–≥–æ–¥—É –Ω–∞ –æ–±—Ä–æ–±–∫—É –º–æ—ó—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –º–µ—Ç–æ—é –Ω–∞–¥–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å–Ω–∏—Ö, –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏—Ö —Ç–∞ —ñ–Ω—à–∏—Ö —Å—É–ø—É—Ç–Ω—ñ—Ö –ø–æ—Å–ª—É–≥. –Ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π(–Ω–∞) –ø—Ä–æ —Å–≤–æ—ó –ø—Ä–∞–≤–∞, –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ —Å—Ç. 8 –ó–∞–∫–æ–Ω—É –£–∫—Ä–∞—ó–Ω–∏ "–ü—Ä–æ –∑–∞—Ö–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö".</p>
      <br>
      <table>
        <tr><td><strong>–ó–∞–º–æ–≤–Ω–∏–∫:</strong> –ó –æ–±'—î–º–æ–º —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—é —Ä–æ–±—ñ—Ç –∑–≥–æ–¥–µ–Ω</td><td><strong>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:</strong></td></tr>
        <tr><td><hr class="signature-line"></td><td><hr class="signature-line"></td></tr>
      </table>
    </div>
  `;
}

async function addModalHandlers(
  actId: number,
  actDetails: any,
  clientPhone: string
): Promise<void> {
  const isClosed = globalCache.isActClosed;
  const isRestricted = userAccessLevel === "–°–ª—é—Å–∞—Ä";
  const body = document.getElementById(ZAKAZ_NARAYD_BODY_ID);
  if (!body) return;
  if (!isRestricted) {
    import("./inhi/knopka_zamok").then(({ initStatusLockDelegation }) => {
      // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –û–î–ò–ù —Ä–∞–∑ ‚Äî –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —î –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫—Ä—ñ–ø–ª–µ–Ω–Ω—è
      initStatusLockDelegation();
    });
  }

  initPhoneClickHandler(body, clientPhone);
  addSaveHandler(actId, actDetails);
  initOdometerInput(EDITABLE_PROBIG_ID);
  if (!isRestricted) {
    const printButton = document.getElementById("print-act-button");
    printButton?.addEventListener("click", () => {
      const prev = globalCache.settings.showCatalog;
      globalCache.settings.showCatalog = false;
      try {
        printModalToPdf();
      } finally {
        globalCache.settings.showCatalog = prev;
      }
    });
    const skladButton = document.getElementById("sklad");
    skladButton?.addEventListener("click", () => showModalAllOtherBases());
  }
  if (!isClosed) {
    setupAutocompleteForEditableCells(
      ACT_ITEMS_TABLE_CONTAINER_ID,
      globalCache
    );
     initializeActWarnings(ACT_ITEMS_TABLE_CONTAINER_ID, actId);
    const addRowButton = document.getElementById("add-row-button");
    addRowButton?.addEventListener("click", () => {
      addNewRow(ACT_ITEMS_TABLE_CONTAINER_ID);
      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
      if (userAccessLevel === "–°–ª—é—Å–∞—Ä") {
        applyAccessRestrictionsToNewRow();
      }
    });
  }
  body.addEventListener("input", handleInputChange);
  updateCalculatedSumsInFooter();
}

function handleInputChange(event: Event): void {
  const target = event.target as HTMLElement;
  const dataName = target.getAttribute("data-name");
  if (globalCache.isActClosed) {
    showNotification("–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–∫—Ä–∏—Ç–∏–π –∞–∫—Ç", "warning", 1000);
    return;
  }
  switch (dataName) {
    case "price":
    case "id_count": {
      const cleanedValue = target.textContent?.replace(/[^0-9]/g, "") || "";
      const formattedValue = formatNumberWithSpaces(cleanedValue, 0, 0);
      if (target.textContent !== formattedValue) {
        const selection = window.getSelection();
        const originalCaretPosition = selection?.focusOffset || 0;
        target.textContent = formattedValue;
        if (selection && target.firstChild) {
          const formattedLength = formattedValue.length;
          const originalLength = cleanedValue.length;
          const diff = formattedLength - originalLength;
          const newCaretPosition = Math.min(
            originalCaretPosition + diff,
            formattedLength
          );
          const range = document.createRange();
          range.setStart(target.firstChild, Math.max(0, newCaretPosition));
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
        }
      }
      const row = target.closest("tr") as HTMLTableRowElement;
      if (row) calculateRowSum(row);
      break;
    }
    case "name": {
      const name = target.textContent?.trim() || "";
      const isDetail = globalCache.details.includes(name);
      const type = isDetail ? "details" : "works";
      target.setAttribute("data-type", type);

      // –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ü–Ü–ë/–ú–∞–≥–∞–∑–∏–Ω:
      // - –¥–ª—è "works" –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ (–ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
      // - –¥–ª—è "details" (–≤–≤–µ–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É, –ù–ï –∑ –∫–∞—Ç–∞–ª–æ–≥—É) ‚Äî –ù–Ü–ß–û–ì–û –ù–ï –ü–Ü–î–°–¢–ê–í–õ–Ø–Ñ–ú–û
      if (name) {
        const row = target.closest("tr") as HTMLTableRowElement;
        const pibMagCell = row?.querySelector(
          '[data-name="pib_magazin"]'
        ) as HTMLElement | null;
        if (pibMagCell && !pibMagCell.textContent?.trim()) {
          if (type === "works") {
            // –¥–ª—è —Ä–æ–±—ñ—Ç ‚Äî —è–∫ –±—É–ª–æ: –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userName = getUserNameFromLocalStorage();
            if (userName) {
              pibMagCell.textContent = userName;
              pibMagCell.setAttribute("data-type", "slyusars");
            }
          } else {
            // type === "details": –Ω–µ —á—ñ–ø–∞—î–º–æ –ø–æ–ª–µ, –Ω–µ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–∑ localStorage
            // (autocomplete —Ç–∏–ø –º–æ–∂–Ω–∞ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –∞–±–æ –ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º ‚Äî –Ω–∞ —Ç–≤—ñ–π –≤–∏–±—ñ—Ä)
            // –Ø–∫—â–æ —Ö–æ—á–µ—à –ø—ñ–¥—Å–≤—ñ—Ç–∏—Ç–∏ —Ç–∏–ø –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª—ñ—Ç–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –±–µ–∑ –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç—É:
            pibMagCell.setAttribute("data-type", "shops");
          }
        }
      }

      updateCalculatedSumsInFooter();
      break;
    }

    default:
      if (target.id === EDITABLE_PROBIG_ID) {
        const cleanedValue = target.textContent?.replace(/[^0-9]/g, "") || "";
        const formattedValue = formatNumberWithSpaces(cleanedValue, 0, 0);
        if (target.textContent !== formattedValue) {
          target.textContent = formattedValue;
        }
      }
      break;
  }
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage
 */
function getUserNameFromLocalStorage(): string | null {
  try {
    const USER_DATA_KEY = "userAuthData";
    const storedData = localStorage.getItem(USER_DATA_KEY);
    if (!storedData) return null;

    const userData = JSON.parse(storedData);
    return userData?.Name || null;
  } catch (error) {
    console.warn(
      "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ localStorage:",
      error
    );
    return null;
  }
}

// –ø–æ–¥—ñ—è ¬´—ñ–Ω—à—ñ –±–∞–∑–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ¬ª
if (!(window as any).__otherBasesHandlerBound__) {
  document.addEventListener("other-base-data-updated", async () => {
    await loadGlobalData();
    const container = document.getElementById(ACT_ITEMS_TABLE_CONTAINER_ID);
    if (container) {
      setupAutocompleteForEditableCells(
        ACT_ITEMS_TABLE_CONTAINER_ID,
        globalCache
      );
      await refreshQtyWarningsIn(ACT_ITEMS_TABLE_CONTAINER_ID);
      updateCalculatedSumsInFooter();
    }
  });
  (window as any).__otherBasesHandlerBound__ = true;
}
